# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.828136

import typing

from ..styxdefs import *


V_3D_LFCD_METADATA = Metadata(
    id="76d98209bce46f704233aa51f0b21f3581eed454",
    name="3dLFCD",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dLfcdOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_lfcd(...)`.
    """
    out_file: OutputPathType
    """Output image file name."""
    out_file_: OutputPathType
    """Output file."""


def v_3d_lfcd(
    runner: Runner,
    in_file: InputPathType,
    autoclip: bool = False,
    automask: bool = False,
    mask: InputPathType | None = None,
    num_threads: int | None = 1,
    outputtype: typing.Literal["NIFTI", "AFNI", "NIFTI_GZ"] | None = None,
    polort: int | None = None,
    thresh: float | int | None = None,
) -> V3dLfcdOutputs:
    """
    LFCD, as implemented in Nipype (module: nipype.interfaces.afni.preprocess,
    interface: LFCD).
    Performs degree centrality on a dataset using a given maskfile via the
    3dLFCD command
    For complete details, see the `3dLFCD Documentation.
    <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dLFCD.html>`_
    
    Args:
        runner: Command runner
        in_file: Input file to 3dlfcd.
        autoclip: Clip off low-intensity regions in the dataset.
        automask: Mask the dataset to target brain-only voxels.
        mask: Mask file to mask input data.
        num_threads: Set number of threads.
        outputtype: 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
        polort: No description provided.
        thresh: Threshold to exclude connections where corr <= thresh.
    Returns:
        NamedTuple of outputs (described in `V3dLfcdOutputs`).
    """
    execution = runner.start_execution(V_3D_LFCD_METADATA)
    cargs = []
    cargs.append("3dLFCD")
    cargs.append(execution.input_file(in_file))
    cargs.append("[ARGS]")
    if autoclip:
        cargs.append("-autoclip")
    if automask:
        cargs.append("-automask")
    cargs.append("[ENVIRON]")
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    if num_threads is not None:
        cargs.append(str(num_threads))
    cargs.append("[OUT_FILE]")
    if outputtype is not None:
        cargs.append(outputtype)
    if polort is not None:
        cargs.extend(["-polort", str(polort)])
    if thresh is not None:
        cargs.extend(["-thresh", str(thresh)])
    ret = V3dLfcdOutputs(
        out_file=execution.output_file(f"{in_file}_afni", optional=True),
        out_file_=execution.output_file(f"out_file", optional=True),
    )
    execution.run(cargs)
    return ret
