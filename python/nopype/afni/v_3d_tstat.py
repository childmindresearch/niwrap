# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.826370

import typing

from ..styxdefs import *


V_3D_TSTAT_METADATA = Metadata(
    id="e596c024bf6f154b50ebebbe40d07abc5b674e50",
    name="3dTstat",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dTstatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_tstat(...)`.
    """
    out_file: OutputPathType
    """Output image file name."""
    out_file_: OutputPathType
    """Output file."""


def v_3d_tstat(
    runner: Runner,
    in_file: InputPathType,
    mask: InputPathType | None = None,
    num_threads: int | None = 1,
    options: str | None = None,
    outputtype: typing.Literal["NIFTI", "AFNI", "NIFTI_GZ"] | None = None,
) -> V3dTstatOutputs:
    """
    TStat, as implemented in Nipype (module: nipype.interfaces.afni.utils,
    interface: TStat).
    Compute voxel-wise statistics using AFNI 3dTstat command
    For complete details, see the `3dTstat Documentation.
    <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dTstat.html>`_
    
    Args:
        runner: Command runner
        in_file: Input file to 3dtstat.
        mask: Mask file.
        num_threads: Set number of threads.
        options: Selected statistical output.
        outputtype: 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
    Returns:
        NamedTuple of outputs (described in `V3dTstatOutputs`).
    """
    execution = runner.start_execution(V_3D_TSTAT_METADATA)
    cargs = []
    cargs.append("3dTstat")
    cargs.append(execution.input_file(in_file))
    cargs.append("[ARGS]")
    cargs.append("[ENVIRON]")
    if mask is not None:
        cargs.extend(["-mask", execution.input_file(mask)])
    if num_threads is not None:
        cargs.append(str(num_threads))
    if options is not None:
        cargs.append(options)
    cargs.append("[OUT_FILE]")
    if outputtype is not None:
        cargs.append(outputtype)
    ret = V3dTstatOutputs(
        out_file=execution.output_file(f"{in_file}_tstat", optional=True),
        out_file_=execution.output_file(f"out_file", optional=True),
    )
    execution.run(cargs)
    return ret
