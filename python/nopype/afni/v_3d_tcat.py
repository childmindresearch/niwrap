# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.833047

import typing

from ..styxdefs import *


V_3D_TCAT_METADATA = Metadata(
    id="903c68a2e804c65264f0fb8c33a808c8721d2afd",
    name="3dTcat",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class V3dTcatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `v_3d_tcat(...)`.
    """
    out_file: OutputPathType
    """Output image file name."""
    out_file_: OutputPathType
    """Output file."""


def v_3d_tcat(
    runner: Runner,
    in_files: list[InputPathType],
    num_threads: int | None = 1,
    outputtype: typing.Literal["NIFTI", "AFNI", "NIFTI_GZ"] | None = None,
    rlt: typing.Literal["", "+", "++"] | None = None,
    verbose: bool = False,
) -> V3dTcatOutputs:
    """
    TCat, as implemented in Nipype (module: nipype.interfaces.afni.utils, interface:
    TCat).
    Concatenate sub-bricks from input datasets into one big 3D+time dataset.
    TODO Replace InputMultiPath in_files with Traits.List, if possible. Current
    version adds extra whitespace.
    For complete details, see the `3dTcat Documentation.
    <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dTcat.html>`_
    
    Args:
        runner: Command runner
        in_files: Input file to 3dtcat.
        num_threads: Set number of threads.
        outputtype: 'nifti' or 'afni' or 'nifti_gz'. Afni output filetype.
        rlt: '' or '+' or '++'. Remove linear trends in each voxel time series
            loaded from each input dataset, separately. option -rlt removes the
            least squares fit of 'a+b*t' to each voxel time series. option -rlt+
            adds dataset mean back in. option -rlt++ adds overall mean of all
            dataset timeseries back in.
        verbose: Print out some verbose output as the program.
    Returns:
        NamedTuple of outputs (described in `V3dTcatOutputs`).
    """
    execution = runner.start_execution(V_3D_TCAT_METADATA)
    cargs = []
    cargs.append("3dTcat")
    if rlt is not None:
        cargs.extend(["-rlt", rlt])
    cargs.extend(["", *[execution.input_file(f) for f in in_files]])
    cargs.append("[ARGS]")
    cargs.append("[ENVIRON]")
    if num_threads is not None:
        cargs.append(str(num_threads))
    cargs.append("[OUT_FILE]")
    if outputtype is not None:
        cargs.append(outputtype)
    if verbose:
        cargs.append("-verb")
    ret = V3dTcatOutputs(
        out_file=execution.output_file(f"{in_files}_tcat", optional=True),
        out_file_=execution.output_file(f"out_file", optional=True),
    )
    execution.run(cargs)
    return ret
