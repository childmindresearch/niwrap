# This file was auto generated by styx
# Do not edit this file directly

import typing

from ..styxdefs import *


VOLUME_TFCE_METADATA = Metadata(
    id="71125f1921050780da51551447f0e518fed90b03",
    name="volume-tfce",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class VolumeTfceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_tfce(...)`.
    """
    volume_out: OutputPathType
    """the output volume"""


def volume_tfce(
    runner: Runner,
    volume_in: InputPathType,
    volume_out: InputPathType,
    opt_presmooth_kernel: float | int | None = None,
    opt_roi_roi_volume: InputPathType | None = None,
    opt_subvolume_subvolume: str | None = None,
) -> VolumeTfceOutputs:
    """
    DO TFCE ON A VOLUME FILE.
    
    This command does not do any statistical analysis. Please use something like
    PALM if you are just trying to do statistics on your data.
    
    Threshold-free cluster enhancement is a method to increase the relative
    value of regions that would form clusters in a standard thresholding test.
    This is accomplished by evaluating the integral of:
    
    e(h, p)^E * h^H * dh
    
    at each voxel p, where h ranges from 0 to the maximum value in the data, and
    e(h, p) is the extent of the cluster containing voxel p at threshold h.
    Negative values are similarly enhanced by negating the data, running the
    same process, and negating the result.
    
    This method is explained in: Smith SM, Nichols TE., "Threshold-free cluster
    enhancement: addressing problems of smoothing, threshold dependence and
    localisation in cluster inference." Neuroimage. 2009 Jan 1;44(1):83-98.
    PMID: 18501637
    
    Args:
        runner: Command runner
        volume_in: the volume to run TFCE on
        volume_out: the output volume
        opt_presmooth_kernel: smooth the volume before running TFCE: the size of
            the gaussian smoothing kernel in mm, as sigma by default
        opt_roi_roi_volume: select a region of interest to run TFCE on: the area
            to run TFCE on, as a volume
        opt_subvolume_subvolume: select a single subvolume: the subvolume number
            or name
    Returns:
        NamedTuple of outputs (described in `VolumeTfceOutputs`).
    """
    execution = runner.start_execution(VOLUME_TFCE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-tfce")
    cargs.append(execution.input_file(volume_in))
    cargs.append(execution.input_file(volume_out))
    if opt_presmooth_kernel is not None:
        cargs.extend(["-presmooth", str(opt_presmooth_kernel)])
    if opt_roi_roi_volume is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_volume)])
    if opt_subvolume_subvolume is not None:
        cargs.extend(["-subvolume", opt_subvolume_subvolume])
    ret = VolumeTfceOutputs(
        volume_out=execution.output_file(f"{volume_out}"),
    )
    execution.run(cargs)
    return ret
