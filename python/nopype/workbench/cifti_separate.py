# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.959686

import typing

from ..styxdefs import *


CIFTI_SEPARATE_METADATA = Metadata(
    id="8b534b3bfe3e602715c45a48422854835e18b763",
    name="cifti-separate",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiSeparateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_separate(...)`.
    """


def cifti_separate(
    runner: Runner,
    cifti_in: InputPathType,
    direction: str,
    opt_volume_all: bool = False,
    opt_label_structure: str | None = None,
    opt_metric_structure: str | None = None,
    opt_volume_structure: str | None = None,
) -> CiftiSeparateOutputs:
    """
    WRITE A CIFTI STRUCTURE AS METRIC, LABEL OR VOLUME.
    
    For dtseries, dscalar, and dlabel, use COLUMN for <direction>, and if you
    have a symmetric dconn, COLUMN is more efficient.
    
    You must specify at least one of -metric, -volume-all, -volume, or -label
    for this command to do anything. Output volumes will spatially line up with
    their original positions, whether or not they are cropped. Volume files
    produced by separating a dlabel file, or from the -label suboption of
    -volume-all, will be label volumes, see -volume-help.
    
    For each <structure> argument, use one of the following strings:
    
    CORTEX_LEFT
    CORTEX_RIGHT
    CEREBELLUM
    ACCUMBENS_LEFT
    ACCUMBENS_RIGHT
    ALL_GREY_MATTER
    ALL_WHITE_MATTER
    AMYGDALA_LEFT
    AMYGDALA_RIGHT
    BRAIN_STEM
    CAUDATE_LEFT
    CAUDATE_RIGHT
    CEREBELLAR_WHITE_MATTER_LEFT
    CEREBELLAR_WHITE_MATTER_RIGHT
    CEREBELLUM_LEFT
    CEREBELLUM_RIGHT
    CEREBRAL_WHITE_MATTER_LEFT
    CEREBRAL_WHITE_MATTER_RIGHT
    CORTEX
    DIENCEPHALON_VENTRAL_LEFT
    DIENCEPHALON_VENTRAL_RIGHT
    HIPPOCAMPUS_LEFT
    HIPPOCAMPUS_RIGHT
    INVALID
    OTHER
    OTHER_GREY_MATTER
    OTHER_WHITE_MATTER
    PALLIDUM_LEFT
    PALLIDUM_RIGHT
    PUTAMEN_LEFT
    PUTAMEN_RIGHT
    THALAMUS_LEFT
    THALAMUS_RIGHT
    
    Args:
        runner: Command runner
        cifti_in: the cifti to separate a component of
        direction: which direction to separate into components, ROW or COLUMN
        opt_volume_all: separate all volume structures into a volume file
        opt_label_structure: separate a surface model into a surface label file:
            the structure to output
        opt_metric_structure: separate a surface model into a metric file: the
            structure to output
        opt_volume_structure: separate a volume structure into a volume file:
            the structure to output
    Returns:
        NamedTuple of outputs (described in `CiftiSeparateOutputs`).
    """
    execution = runner.start_execution(CIFTI_SEPARATE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-separate")
    cargs.append(execution.input_file(cifti_in))
    cargs.append(direction)
    if opt_volume_all:
        cargs.append("-volume-all")
    if opt_label_structure is not None:
        cargs.extend(["-label", opt_label_structure])
    if opt_metric_structure is not None:
        cargs.extend(["-metric", opt_metric_structure])
    if opt_volume_structure is not None:
        cargs.extend(["-volume", opt_volume_structure])
    ret = CiftiSeparateOutputs(
    )
    execution.run(cargs)
    return ret
