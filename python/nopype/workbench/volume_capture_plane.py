# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T19:06:12.818086

import typing

from ..styxdefs import *


VOLUME_CAPTURE_PLANE_METADATA = Metadata(
    id="ef1331ea93cda4f967e51c9107d878382114ce83",
    name="volume-capture-plane",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class VolumeCapturePlaneOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_capture_plane(...)`.
    """


def volume_capture_plane(
    runner: Runner,
    volume: InputPathType,
    subvolume: str,
    interp: str,
    h_dim: float | int,
    v_dim: float | int,
    scale_min: float | int,
    scale_max: float | int,
    bottom_left_x: float | int,
    bottom_left_y: float | int,
    bottom_left_z: float | int,
    bottom_right_x: float | int,
    bottom_right_y: float | int,
    bottom_right_z: float | int,
    top_left_x: float | int,
    top_left_y: float | int,
    top_left_z: float | int,
    image: str,
) -> VolumeCapturePlaneOutputs:
    """
    INTERPOLATE IMAGE FROM PLANE THROUGH VOLUME.
    
    NOTE: If you want to generate an image with all of the capabilities of the
    GUI rendering, see -show-scene.
    
    Renders an image of an arbitrary plane through the volume file, with a
    simple linear grayscale palette. The parameter <interp> must be one of:
    
    CUBIC
    ENCLOSING_VOXEL
    TRILINEAR
    
    Args:
        runner: Command runner
        volume: the volume file to interpolate from
        subvolume: the name or number of the subvolume to use
        interp: interpolation type
        h_dim: width of output image, in pixels
        v_dim: height of output image, in pixels
        scale_min: value to render as black
        scale_max: value to render as white
        bottom_left_x: x-coordinate of the bottom left of the output image
        bottom_left_y: y-coordinate of the bottom left of the output image
        bottom_left_z: z-coordinate of the bottom left of the output image
        bottom_right_x: x-coordinate of the bottom right of the output image
        bottom_right_y: y-coordinate of the bottom right of the output image
        bottom_right_z: z-coordinate of the bottom right of the output image
        top_left_x: x-coordinate of the top left of the output image
        top_left_y: y-coordinate of the top left of the output image
        top_left_z: z-coordinate of the top left of the output image
        image: output - the output image
    Returns:
        NamedTuple of outputs (described in `VolumeCapturePlaneOutputs`).
    """
    execution = runner.start_execution(VOLUME_CAPTURE_PLANE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-capture-plane")
    cargs.append(execution.input_file(volume))
    cargs.append(subvolume)
    cargs.append(interp)
    cargs.append(str(h_dim))
    cargs.append(str(v_dim))
    cargs.append(str(scale_min))
    cargs.append(str(scale_max))
    cargs.append(str(bottom_left_x))
    cargs.append(str(bottom_left_y))
    cargs.append(str(bottom_left_z))
    cargs.append(str(bottom_right_x))
    cargs.append(str(bottom_right_y))
    cargs.append(str(bottom_right_z))
    cargs.append(str(top_left_x))
    cargs.append(str(top_left_y))
    cargs.append(str(top_left_z))
    cargs.append(image)
    ret = VolumeCapturePlaneOutputs(
    )
    execution.run(cargs)
    return ret
