# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.932224

import typing

from ..styxdefs import *


VOLUME_WARPFIELD_AFFINE_REGRESSION_METADATA = Metadata(
    id="eddebfa5857feee44db2429ada1dc5b0be0fe73b",
    name="volume-warpfield-affine-regression",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class VolumeWarpfieldAffineRegressionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_warpfield_affine_regression(...)`.
    """


def volume_warpfield_affine_regression(
    runner: Runner,
    warpfield: str,
    affine_out: str,
    opt_roi_roi_vol: InputPathType | None = None,
    opt_fnirt_source_volume: str | None = None,
) -> VolumeWarpfieldAffineRegressionOutputs:
    """
    REGRESS AFFINE FROM WARPFIELD.
    
    For all voxels in the warpfield, do a regression that predicts the post-warp
    coordinate from the source coordinate. When -roi is specified, only consider
    voxels with a value greater than 0 in <roi-vol>.
    
    The default is to expect the warpfield to be in relative world coordinates
    (mm space), and to write the output as a world affine (mm space to mm
    space). If you are using FSL-created files and utilities, specify -fnirt and
    -flirt as needed, as their coordinate conventions are different.
    
    Args:
        runner: Command runner
        warpfield: the input warpfield
        affine_out: output - the output affine file
        opt_roi_roi_vol: only consider voxels within a mask (e.g., a brain
            mask): the mask volume
        opt_fnirt_source_volume: input is a fnirt warpfield: the source volume
            used when generating the fnirt warpfield
    Returns:
        NamedTuple of outputs (described in `VolumeWarpfieldAffineRegressionOutputs`).
    """
    execution = runner.start_execution(VOLUME_WARPFIELD_AFFINE_REGRESSION_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-warpfield-affine-regression")
    cargs.append(warpfield)
    cargs.append(affine_out)
    if opt_roi_roi_vol is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_vol)])
    if opt_fnirt_source_volume is not None:
        cargs.extend(["-fnirt", opt_fnirt_source_volume])
    ret = VolumeWarpfieldAffineRegressionOutputs(
    )
    execution.run(cargs)
    return ret
