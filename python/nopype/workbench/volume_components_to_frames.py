# This file was auto generated by styx
# Do not edit this file directly

import typing

from ..styxdefs import *


VOLUME_COMPONENTS_TO_FRAMES_METADATA = Metadata(
    id="618f56ccf873ea27e8ad4c3df60e3ef75e97141d",
    name="volume-components-to-frames",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class VolumeComponentsToFramesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_components_to_frames(...)`.
    """
    output: OutputPathType
    """the input volume converted to multiple frames of scalar type"""


def volume_components_to_frames(
    runner: Runner,
    input_: InputPathType,
    output: InputPathType,
) -> VolumeComponentsToFramesOutputs:
    """
    CONVERT RGB/COMPLEX VOLUME TO FRAMES.
    
    RGB and complex datatypes are not always well supported, this command allows
    separating them into standard subvolumes for better support.
    
    Args:
        runner: Command runner
        input_: the RGB/complex-type volume
        output: the input volume converted to multiple frames of scalar type
    Returns:
        NamedTuple of outputs (described in `VolumeComponentsToFramesOutputs`).
    """
    execution = runner.start_execution(VOLUME_COMPONENTS_TO_FRAMES_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-components-to-frames")
    cargs.append(execution.input_file(input_))
    cargs.append(execution.input_file(output))
    ret = VolumeComponentsToFramesOutputs(
        output=execution.output_file(f"{output}"),
    )
    execution.run(cargs)
    return ret
