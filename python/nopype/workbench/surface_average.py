# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.995070

import typing

from ..styxdefs import *


SURFACE_AVERAGE_METADATA = Metadata(
    id="0f37ac00116a69e3bc47acf0ab908135b0e16225",
    name="surface-average",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class SurfaceAverageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_average(...)`.
    """
    surface_out: OutputPathType
    """the output averaged surface"""


def surface_average(
    runner: Runner,
    surface_out: InputPathType,
    opt_stddev: bool = False,
    opt_uncertainty: bool = False,
    opt_surf_surface: InputPathType | None = None,
) -> SurfaceAverageOutputs:
    """
    AVERAGE SURFACE FILES TOGETHER.
    
    The 3D sample standard deviation is computed as 'sqrt(sum(squaredlength(xyz
    - mean(xyz)))/(n - 1))'.
    
    Uncertainty is a legacy measure used in caret5, and is computed as
    'sum(length(xyz - mean(xyz)))/n'.
    
    When weights are used, the 3D sample standard deviation treats them as
    reliability weights.
    
    Args:
        runner: Command runner
        surface_out: the output averaged surface
        opt_stddev: compute 3D sample standard deviation
        opt_uncertainty: compute caret5 'uncertainty'
        opt_surf_surface: specify a surface to include in the average: a surface
            file to average
    Returns:
        NamedTuple of outputs (described in `SurfaceAverageOutputs`).
    """
    execution = runner.start_execution(SURFACE_AVERAGE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-average")
    cargs.append(execution.input_file(surface_out))
    if opt_stddev:
        cargs.append("-stddev")
    if opt_uncertainty:
        cargs.append("-uncertainty")
    if opt_surf_surface is not None:
        cargs.extend(["-surf", execution.input_file(opt_surf_surface)])
    ret = SurfaceAverageOutputs(
        surface_out=execution.output_file(f"{surface_out}"),
    )
    execution.run(cargs)
    return ret
