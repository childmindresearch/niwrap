# This file was auto generated by styx
# Do not edit this file directly

import typing

from ..styxdefs import *


METRIC_VECTOR_TOWARD_ROI_METADATA = Metadata(
    id="78c8be1564925b4af68634b69b726f77303c56ee",
    name="metric-vector-toward-roi",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class MetricVectorTowardRoiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_vector_toward_roi(...)`.
    """
    metric_out: OutputPathType
    """the output metric"""


def metric_vector_toward_roi(
    runner: Runner,
    surface: InputPathType,
    target_roi: InputPathType,
    metric_out: InputPathType,
    opt_roi_roi_metric: InputPathType | None = None,
) -> MetricVectorTowardRoiOutputs:
    """
    FIND IF VECTORS POINT TOWARD AN ROI.
    
    At each vertex, compute the vector along the start of the shortest path to
    the ROI.
    
    Args:
        runner: Command runner
        surface: the surface to compute on
        target_roi: the roi to find the shortest path to
        metric_out: the output metric
        opt_roi_roi_metric: don't compute for vertices outside an roi: the
            region to compute inside, as a metric
    Returns:
        NamedTuple of outputs (described in `MetricVectorTowardRoiOutputs`).
    """
    execution = runner.start_execution(METRIC_VECTOR_TOWARD_ROI_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-vector-toward-roi")
    cargs.append(execution.input_file(surface))
    cargs.append(execution.input_file(target_roi))
    cargs.append(execution.input_file(metric_out))
    if opt_roi_roi_metric is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_metric)])
    ret = MetricVectorTowardRoiOutputs(
        metric_out=execution.output_file(f"{metric_out}"),
    )
    execution.run(cargs)
    return ret
