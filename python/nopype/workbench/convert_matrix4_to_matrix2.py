# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T19:06:12.742530

import typing

from ..styxdefs import *


CONVERT_MATRIX4_TO_MATRIX2_METADATA = Metadata(
    id="67eb369aec6c16ac6d02572b02229b570c5038e9",
    name="convert-matrix4-to-matrix2",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class ConvertMatrix4ToMatrix2Outputs(typing.NamedTuple):
    """
    Output object returned when calling `convert_matrix4_to_matrix2(...)`.
    """
    counts_out: OutputPathType
    """the total fiber counts, as a cifti file"""


def convert_matrix4_to_matrix2(
    runner: Runner,
    matrix4_wbsparse: str,
    counts_out: InputPathType,
    opt_distances: bool = False,
    opt_individual_fibers: bool = False,
) -> ConvertMatrix4ToMatrix2Outputs:
    """
    GENERATES A MATRIX2 CIFTI FROM MATRIX4 WBSPARSE.
    
    This command makes a cifti file from the fiber counts in a matrix4 wbsparse
    file, and optionally a second cifti file from the distances. Note that while
    the total count is stored exactly, the per-fiber counts are stored as
    approximate fractions, so the output of -individual-fibers will contain
    nonintegers.
    
    Args:
        runner: Command runner
        matrix4_wbsparse: a wbsparse matrix4 file
        counts_out: the total fiber counts, as a cifti file
        opt_distances: output average trajectory distance
        opt_individual_fibers: output files for each fiber direction
    Returns:
        NamedTuple of outputs (described in `ConvertMatrix4ToMatrix2Outputs`).
    """
    execution = runner.start_execution(CONVERT_MATRIX4_TO_MATRIX2_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-convert-matrix4-to-matrix2")
    cargs.append(matrix4_wbsparse)
    cargs.append(execution.input_file(counts_out))
    if opt_distances:
        cargs.append("-distances")
    if opt_individual_fibers:
        cargs.append("-individual-fibers")
    ret = ConvertMatrix4ToMatrix2Outputs(
        counts_out=execution.output_file(f"{counts_out}"),
    )
    execution.run(cargs)
    return ret
