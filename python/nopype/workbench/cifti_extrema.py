# This file was auto generated by styx
# Do not edit this file directly

import typing

from ..styxdefs import *


CIFTI_EXTREMA_METADATA = Metadata(
    id="7468d71a7c23425cd6506031cadc591ef43ffdf3",
    name="cifti-extrema",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiExtremaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_extrema(...)`.
    """
    cifti_out: OutputPathType
    """the output cifti"""


def cifti_extrema(
    runner: Runner,
    cifti: InputPathType,
    surface_distance: float | int,
    volume_distance: float | int,
    direction: str,
    cifti_out: InputPathType,
    opt_left_surface_surface: InputPathType | None = None,
    opt_right_surface_surface: InputPathType | None = None,
    opt_cerebellum_surface_surface: InputPathType | None = None,
    opt_surface_presmooth_surface_kernel: float | int | None = None,
    opt_volume_presmooth_volume_kernel: float | int | None = None,
    opt_presmooth_fwhm: bool = False,
    opt_merged_volume: bool = False,
    opt_sum_maps: bool = False,
    opt_consolidate_mode: bool = False,
    opt_only_maxima: bool = False,
    opt_only_minima: bool = False,
) -> CiftiExtremaOutputs:
    """
    FIND EXTREMA IN A CIFTI FILE.
    
    Finds spatial locations in a cifti file that have more extreme values than
    all nearby locations in the same component (surface or volume structure).
    The input cifti file must have a brain models mapping along the specified
    direction. COLUMN is the direction that works on dtseries and dscalar. For
    dconn, if it is symmetric use COLUMN, otherwise use ROW.
    
    Args:
        runner: Command runner
        cifti: the input cifti
        surface_distance: the minimum distance between extrema of the same type,
            for surface components
        volume_distance: the minimum distance between extrema of the same type,
            for volume components
        direction: which dimension to find extrema along, ROW or COLUMN
        cifti_out: the output cifti
        opt_left_surface_surface: specify the left surface to use: the left
            surface file
        opt_right_surface_surface: specify the right surface to use: the right
            surface file
        opt_cerebellum_surface_surface: specify the cerebellum surface to use:
            the cerebellum surface file
        opt_surface_presmooth_surface_kernel: smooth on the surface before
            finding extrema: the size of the gaussian surface smoothing kernel in
            mm, as sigma by default
        opt_volume_presmooth_volume_kernel: smooth volume components before
            finding extrema: the size of the gaussian volume smoothing kernel in mm,
            as sigma by default
        opt_presmooth_fwhm: smoothing kernel distances are FWHM, not sigma
        opt_merged_volume: treat volume components as if they were a single
            component
        opt_sum_maps: output the sum of the extrema maps instead of each map
            separately
        opt_consolidate_mode: use consolidation of local minima instead of a
            large neighborhood
        opt_only_maxima: only find the maxima
        opt_only_minima: only find the minima
    Returns:
        NamedTuple of outputs (described in `CiftiExtremaOutputs`).
    """
    execution = runner.start_execution(CIFTI_EXTREMA_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-extrema")
    cargs.append(execution.input_file(cifti))
    cargs.append(str(surface_distance))
    cargs.append(str(volume_distance))
    cargs.append(direction)
    cargs.append(execution.input_file(cifti_out))
    if opt_left_surface_surface is not None:
        cargs.extend(["-left-surface", execution.input_file(opt_left_surface_surface)])
    if opt_right_surface_surface is not None:
        cargs.extend(["-right-surface", execution.input_file(opt_right_surface_surface)])
    if opt_cerebellum_surface_surface is not None:
        cargs.extend(["-cerebellum-surface", execution.input_file(opt_cerebellum_surface_surface)])
    if opt_surface_presmooth_surface_kernel is not None:
        cargs.extend(["-surface-presmooth", str(opt_surface_presmooth_surface_kernel)])
    if opt_volume_presmooth_volume_kernel is not None:
        cargs.extend(["-volume-presmooth", str(opt_volume_presmooth_volume_kernel)])
    if opt_presmooth_fwhm:
        cargs.append("-presmooth-fwhm")
    if opt_merged_volume:
        cargs.append("-merged-volume")
    if opt_sum_maps:
        cargs.append("-sum-maps")
    if opt_consolidate_mode:
        cargs.append("-consolidate-mode")
    if opt_only_maxima:
        cargs.append("-only-maxima")
    if opt_only_minima:
        cargs.append("-only-minima")
    ret = CiftiExtremaOutputs(
        cifti_out=execution.output_file(f"{cifti_out}"),
    )
    execution.run(cargs)
    return ret
