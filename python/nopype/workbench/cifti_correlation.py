# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.859355

import typing

from ..styxdefs import *


CIFTI_CORRELATION_METADATA = Metadata(
    id="33de62b72065a11a57d5ede04333201200d2f3ab",
    name="cifti-correlation",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiCorrelationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_correlation(...)`.
    """
    cifti_out: OutputPathType
    """output cifti file"""


def cifti_correlation(
    runner: Runner,
    cifti: InputPathType,
    cifti_out: InputPathType,
    opt_roi_override: bool = False,
    opt_weights_weight_file: str | None = None,
    opt_fisher_z: bool = False,
    opt_no_demean: bool = False,
    opt_covariance: bool = False,
    opt_mem_limit_limit_gb: float | int | None = None,
) -> CiftiCorrelationOutputs:
    """
    GENERATE CORRELATION OF ROWS IN A CIFTI FILE.
    
    For each row (or each row inside an roi if -roi-override is specified),
    correlate to all other rows. The -cifti-roi suboption to -roi-override may
    not be specified with any other -*-roi suboption, but you may specify the
    other -*-roi suboptions together.
    
    When using the -fisher-z option, the output is NOT a Z-score, it is
    artanh(r), to do further math on this output, consider using -cifti-math.
    
    Restricting the memory usage will make it calculate the output in chunks,
    and if the input file size is more than 70% of the memory limit, it will
    also read through the input file as rows are required, resulting in several
    passes through the input file (once per chunk). Memory limit does not need
    to be an integer, you may also specify 0 to calculate a single output row at
    a time (this may be very slow).
    
    Args:
        runner: Command runner
        cifti: input cifti file
        cifti_out: output cifti file
        opt_roi_override: perform correlation from a subset of rows to all rows
        opt_weights_weight_file: specify column weights: text file containing
            one weight per column
        opt_fisher_z: apply fisher small z transform (ie, artanh) to correlation
        opt_no_demean: instead of correlation, do dot product of rows, then
            normalize by diagonal
        opt_covariance: compute covariance instead of correlation
        opt_mem_limit_limit_gb: restrict memory usage: memory limit in gigabytes
    Returns:
        NamedTuple of outputs (described in `CiftiCorrelationOutputs`).
    """
    execution = runner.start_execution(CIFTI_CORRELATION_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-correlation")
    cargs.append(execution.input_file(cifti))
    cargs.append(execution.input_file(cifti_out))
    if opt_roi_override:
        cargs.append("-roi-override")
    if opt_weights_weight_file is not None:
        cargs.extend(["-weights", opt_weights_weight_file])
    if opt_fisher_z:
        cargs.append("-fisher-z")
    if opt_no_demean:
        cargs.append("-no-demean")
    if opt_covariance:
        cargs.append("-covariance")
    if opt_mem_limit_limit_gb is not None:
        cargs.extend(["-mem-limit", str(opt_mem_limit_limit_gb)])
    ret = CiftiCorrelationOutputs(
        cifti_out=execution.output_file(f"{cifti_out}"),
    )
    execution.run(cargs)
    return ret
