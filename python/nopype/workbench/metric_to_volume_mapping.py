# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T19:06:12.852960

import typing

from ..styxdefs import *


METRIC_TO_VOLUME_MAPPING_METADATA = Metadata(
    id="e6e2b49ecd71729a0896b54e596d8ffd165c3f64",
    name="metric-to-volume-mapping",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class MetricToVolumeMappingOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_to_volume_mapping(...)`.
    """
    volume_out: OutputPathType
    """the output volume file"""


def metric_to_volume_mapping(
    runner: Runner,
    metric: InputPathType,
    surface: InputPathType,
    volume_space: InputPathType,
    volume_out: InputPathType,
    opt_nearest_vertex_distance: float | int | None = None,
) -> MetricToVolumeMappingOutputs:
    """
    MAP METRIC FILE TO VOLUME.
    
    Maps values from a metric file into a volume file. You must specify exactly
    one mapping method option. The -nearest-vertex method uses the value from
    the vertex closest to the voxel center (useful for integer values). The
    -ribbon-constrained method uses the same method as in
    -volume-to-surface-mapping, then uses the weights in reverse. Mapping to
    lower resolutions than the mesh may require a larger -voxel-subdiv value in
    order to have all of the surface data participate.
    
    Args:
        runner: Command runner
        metric: the input metric file
        surface: the surface to use coordinates from
        volume_space: a volume file in the desired output volume space
        volume_out: the output volume file
        opt_nearest_vertex_distance: use the value from the vertex closest to
            the voxel center: how far from the surface to map values to voxels, in
            mm
    Returns:
        NamedTuple of outputs (described in `MetricToVolumeMappingOutputs`).
    """
    execution = runner.start_execution(METRIC_TO_VOLUME_MAPPING_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-to-volume-mapping")
    cargs.append(execution.input_file(metric))
    cargs.append(execution.input_file(surface))
    cargs.append(execution.input_file(volume_space))
    cargs.append(execution.input_file(volume_out))
    if opt_nearest_vertex_distance is not None:
        cargs.extend(["-nearest-vertex", str(opt_nearest_vertex_distance)])
    ret = MetricToVolumeMappingOutputs(
        volume_out=execution.output_file(f"{volume_out}"),
    )
    execution.run(cargs)
    return ret
