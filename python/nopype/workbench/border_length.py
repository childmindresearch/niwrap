# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.862765

import typing

from ..styxdefs import *


BORDER_LENGTH_METADATA = Metadata(
    id="ad9b2e8071f7a0a549dcafffc31693988c0dd099",
    name="border-length",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class BorderLengthOutputs(typing.NamedTuple):
    """
    Output object returned when calling `border_length(...)`.
    """


def border_length(
    runner: Runner,
    border: InputPathType,
    surface: InputPathType,
    opt_corrected_areas_area_metric: InputPathType | None = None,
    opt_separate_pieces: bool = False,
    opt_hide_border_name: bool = False,
) -> BorderLengthOutputs:
    """
    REPORT LENGTH OF BORDERS.
    
    For each border, print its length along the surface, in mm. If a border has
    multiple parts, their lengths are summed before printing, unless
    -separate-pieces is specified.
    
    The -corrected-areas option is intended for when the length is not
    meaningfully measurable on individual surfaces, it is only an approximate
    correction for the reduction in structure of a group average surface.
    
    Args:
        runner: Command runner
        border: the input border file
        surface: the surface to measure the borders on
        opt_corrected_areas_area_metric: vertex areas to use instead of
            computing them from the surface: the corrected vertex areas, as a metric
        opt_separate_pieces: report lengths for multi-part borders as separate
            numbers
        opt_hide_border_name: don't print border name before each output
    Returns:
        NamedTuple of outputs (described in `BorderLengthOutputs`).
    """
    execution = runner.start_execution(BORDER_LENGTH_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-border-length")
    cargs.append(execution.input_file(border))
    cargs.append(execution.input_file(surface))
    if opt_corrected_areas_area_metric is not None:
        cargs.extend(["-corrected-areas", execution.input_file(opt_corrected_areas_area_metric)])
    if opt_separate_pieces:
        cargs.append("-separate-pieces")
    if opt_hide_border_name:
        cargs.append("-hide-border-name")
    ret = BorderLengthOutputs(
    )
    execution.run(cargs)
    return ret
