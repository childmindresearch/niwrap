# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.842102

import typing

from ..styxdefs import *


CIFTI_DILATE_METADATA = Metadata(
    id="895afa04360709a85b690313eef1c4fce98df36b",
    name="cifti-dilate",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiDilateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_dilate(...)`.
    """
    cifti_out: OutputPathType
    """the output cifti file"""


def cifti_dilate(
    runner: Runner,
    cifti_in: InputPathType,
    direction: str,
    surface_distance: float | int,
    volume_distance: float | int,
    cifti_out: InputPathType,
    opt_left_surface_surface: InputPathType | None = None,
    opt_right_surface_surface: InputPathType | None = None,
    opt_cerebellum_surface_surface: InputPathType | None = None,
    opt_bad_brainordinate_roi_roi_cifti: InputPathType | None = None,
    opt_nearest: bool = False,
    opt_merged_volume: bool = False,
    opt_legacy_mode: bool = False,
) -> CiftiDilateOutputs:
    """
    DILATE A CIFTI FILE.
    
    For all data values designated as bad, if they neighbor a good value or are
    within the specified distance of a good value in the same kind of model,
    replace the value with a distance weighted average of nearby good values,
    otherwise set the value to zero. If -nearest is specified, it will use the
    value from the closest good value within range instead of a weighted
    average. When the input file contains label data, nearest dilation is used
    on the surface, and weighted popularity is used in the volume.
    
    The -*-corrected-areas options are intended for dilating on group average
    surfaces, but it is only an approximate correction for the reduction of
    structure in a group average surface.
    
    If -bad-brainordinate-roi is specified, all values, including those with
    value zero, are good, except for locations with a positive value in the ROI.
    If it is not specified, only values equal to zero are bad.
    
    Args:
        runner: Command runner
        cifti_in: the input cifti file
        direction: which dimension to dilate along, ROW or COLUMN
        surface_distance: the distance to dilate on surfaces, in mm
        volume_distance: the distance to dilate in the volume, in mm
        cifti_out: the output cifti file
        opt_left_surface_surface: specify the left surface to use: the left
            surface file
        opt_right_surface_surface: specify the right surface to use: the right
            surface file
        opt_cerebellum_surface_surface: specify the cerebellum surface to use:
            the cerebellum surface file
        opt_bad_brainordinate_roi_roi_cifti: specify an roi of brainordinates to
            overwrite, rather than zeros: cifti dscalar or dtseries file, positive
            values denote brainordinates to have their values replaced
        opt_nearest: use nearest good value instead of a weighted average
        opt_merged_volume: treat volume components as if they were a single
            component
        opt_legacy_mode: use the math from v1.3.2 and earlier for weighted
            dilation
    Returns:
        NamedTuple of outputs (described in `CiftiDilateOutputs`).
    """
    execution = runner.start_execution(CIFTI_DILATE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-dilate")
    cargs.append(execution.input_file(cifti_in))
    cargs.append(direction)
    cargs.append(str(surface_distance))
    cargs.append(str(volume_distance))
    cargs.append(execution.input_file(cifti_out))
    if opt_left_surface_surface is not None:
        cargs.extend(["-left-surface", execution.input_file(opt_left_surface_surface)])
    if opt_right_surface_surface is not None:
        cargs.extend(["-right-surface", execution.input_file(opt_right_surface_surface)])
    if opt_cerebellum_surface_surface is not None:
        cargs.extend(["-cerebellum-surface", execution.input_file(opt_cerebellum_surface_surface)])
    if opt_bad_brainordinate_roi_roi_cifti is not None:
        cargs.extend(["-bad-brainordinate-roi", execution.input_file(opt_bad_brainordinate_roi_roi_cifti)])
    if opt_nearest:
        cargs.append("-nearest")
    if opt_merged_volume:
        cargs.append("-merged-volume")
    if opt_legacy_mode:
        cargs.append("-legacy-mode")
    ret = CiftiDilateOutputs(
        cifti_out=execution.output_file(f"{cifti_out}"),
    )
    execution.run(cargs)
    return ret
