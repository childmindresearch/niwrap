# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:56:52.672089

import typing

from ..styxdefs import *


CIFTI_REORDER_METADATA = Metadata(
    id="ee3c3a20bb46c57deb6ff588255019fb7b0f00c5",
    name="cifti-reorder",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiReorderOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_reorder(...)`.
    """
    cifti_out: OutputPathType
    """the reordered cifti file"""


def cifti_reorder(
    runner: Runner,
    cifti_in: InputPathType,
    direction: str,
    reorder_list: str,
    cifti_out: InputPathType,
) -> CiftiReorderOutputs:
    """
    REORDER THE PARCELS OR SCALAR/LABEL MAPS IN A CIFTI FILE.
    
    The mapping along the specified direction must be parcels, scalars, or
    labels. For pscalar or ptseries, use COLUMN to reorder the parcels. For
    dlabel, use ROW. The <reorder-list> file must contain 1-based indices
    separated by whitespace (spaces, newlines, tabs, etc), with as many indices
    as <cifti-in> has along the specified dimension. These indices specify which
    current index should end up in that position, for instance, if the current
    order is 'A B C D', and the desired order is 'D A B C', the text file should
    contain '4 1 2 3'.
    
    Args:
        runner: Command runner
        cifti_in: input cifti file
        direction: which dimension to reorder along, ROW or COLUMN
        reorder_list: a text file containing the desired order transformation
        cifti_out: the reordered cifti file
    Returns:
        NamedTuple of outputs (described in `CiftiReorderOutputs`).
    """
    execution = runner.start_execution(CIFTI_REORDER_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-reorder")
    cargs.append(execution.input_file(cifti_in))
    cargs.append(direction)
    cargs.append(reorder_list)
    cargs.append(execution.input_file(cifti_out))
    ret = CiftiReorderOutputs(
        cifti_out=execution.output_file(f"{cifti_out}"),
    )
    execution.run(cargs)
    return ret
