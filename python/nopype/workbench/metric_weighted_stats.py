# This file was auto generated by styx
# Do not edit this file directly

import typing

from ..styxdefs import *


METRIC_WEIGHTED_STATS_METADATA = Metadata(
    id="e5d5b40b1384b186b7c4e717b425cc51610e99e1",
    name="metric-weighted-stats",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class MetricWeightedStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_weighted_stats(...)`.
    """


def metric_weighted_stats(
    runner: Runner,
    metric_in: InputPathType,
    opt_area_surface_area_surface: InputPathType | None = None,
    opt_weight_metric_weight_metric: InputPathType | None = None,
    opt_column_column: str | None = None,
    opt_roi_roi_metric: InputPathType | None = None,
    opt_mean: bool = False,
    opt_stdev: bool = False,
    opt_percentile_percent: float | int | None = None,
    opt_sum: bool = False,
    opt_show_map_name: bool = False,
) -> MetricWeightedStatsOutputs:
    """
    WEIGHTED SPATIAL STATISTICS ON A METRIC FILE.
    
    For each column of the input, a line of text is printed, resulting from the
    specified operation. You must specify exactly one of -area-surface or
    -weight-metric. Use -column to only give output for a single column. If the
    -roi option is used without -match-maps, then each line will contain as many
    numbers as there are maps in the ROI file, separated by tab characters.
    Exactly one of -mean, -stdev, -percentile or -sum must be specified.
    
    Using -sum with -area-surface (or -weight-metric with a metric containing
    similar data) is equivalent to integrating with respect to surface area. For
    example, if you want to find the surface area within an roi, do this:
    
    $ wb_command -metric-weighted-stats roi.func.gii -sum -area-surface
    midthickness.surf.gii
    
    Args:
        runner: Command runner
        metric_in: the input metric
        opt_area_surface_area_surface: use vertex areas as weights: the surface
            to use for vertex areas
        opt_weight_metric_weight_metric: use weights from a metric file: metric
            file containing the weights
        opt_column_column: only display output for one column: the column number
            or name
        opt_roi_roi_metric: only consider data inside an roi: the roi, as a
            metric file
        opt_mean: compute weighted mean
        opt_stdev: compute weighted standard deviation
        opt_percentile_percent: compute weighted percentile: the percentile to
            find, must be between 0 and 100
        opt_sum: compute weighted sum
        opt_show_map_name: print map index and name before each output
    Returns:
        NamedTuple of outputs (described in `MetricWeightedStatsOutputs`).
    """
    execution = runner.start_execution(METRIC_WEIGHTED_STATS_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-weighted-stats")
    cargs.append(execution.input_file(metric_in))
    if opt_area_surface_area_surface is not None:
        cargs.extend(["-area-surface", execution.input_file(opt_area_surface_area_surface)])
    if opt_weight_metric_weight_metric is not None:
        cargs.extend(["-weight-metric", execution.input_file(opt_weight_metric_weight_metric)])
    if opt_column_column is not None:
        cargs.extend(["-column", opt_column_column])
    if opt_roi_roi_metric is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_metric)])
    if opt_mean:
        cargs.append("-mean")
    if opt_stdev:
        cargs.append("-stdev")
    if opt_percentile_percent is not None:
        cargs.extend(["-percentile", str(opt_percentile_percent)])
    if opt_sum:
        cargs.append("-sum")
    if opt_show_map_name:
        cargs.append("-show-map-name")
    ret = MetricWeightedStatsOutputs(
    )
    execution.run(cargs)
    return ret
