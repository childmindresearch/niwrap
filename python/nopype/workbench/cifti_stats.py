# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T19:06:12.790262

import typing

from ..styxdefs import *


CIFTI_STATS_METADATA = Metadata(
    id="f72192b676bcc15914c36aef042c4d483a2a6ad5",
    name="cifti-stats",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_stats(...)`.
    """


def cifti_stats(
    runner: Runner,
    cifti_in: InputPathType,
    opt_reduce_operation: str | None = None,
    opt_percentile_percent: float | int | None = None,
    opt_column_column: float | int | None = None,
    opt_roi_roi_cifti: InputPathType | None = None,
    opt_show_map_name: bool = False,
) -> CiftiStatsOutputs:
    """
    STATISTICS ALONG CIFTI COLUMNS.
    
    For each column of the input, a line of text is printed, resulting from the
    specified reduction or percentile operation. If -roi is specified without
    -match-maps, then each line will contain as many numbers as there are maps
    in the ROI file, separated by tab characters. Use -column to only give
    output for a single data column. Exactly one of -reduce or -percentile must
    be specified.
    
    The argument to the -reduce option must be one of the following:
    
    MAX: the maximum value
    MIN: the minimum value
    INDEXMAX: the 1-based index of the maximum value
    INDEXMIN: the 1-based index of the minimum value
    SUM: add all values
    PRODUCT: multiply all values
    MEAN: the mean of the data
    STDEV: the standard deviation (N denominator)
    SAMPSTDEV: the sample standard deviation (N-1 denominator)
    VARIANCE: the variance of the data
    TSNR: mean divided by sample standard deviation (N-1 denominator)
    COV: sample standard deviation (N-1 denominator) divided by mean
    L2NORM: square root of sum of squares
    MEDIAN: the median of the data
    MODE: the mode of the data
    COUNT_NONZERO: the number of nonzero elements in the data
    
    Args:
        runner: Command runner
        cifti_in: the input cifti
        opt_reduce_operation: use a reduction operation: the reduction operation
        opt_percentile_percent: give the value at a percentile: the percentile
            to find, must be between 0 and 100
        opt_column_column: only display output for one column: the column index
            (starting from 1)
        opt_roi_roi_cifti: only consider data inside an roi: the roi, as a cifti
            file
        opt_show_map_name: print column index and name before each output
    Returns:
        NamedTuple of outputs (described in `CiftiStatsOutputs`).
    """
    execution = runner.start_execution(CIFTI_STATS_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-stats")
    cargs.append(execution.input_file(cifti_in))
    if opt_reduce_operation is not None:
        cargs.extend(["-reduce", opt_reduce_operation])
    if opt_percentile_percent is not None:
        cargs.extend(["-percentile", str(opt_percentile_percent)])
    if opt_column_column is not None:
        cargs.extend(["-column", str(opt_column_column)])
    if opt_roi_roi_cifti is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_cifti)])
    if opt_show_map_name:
        cargs.append("-show-map-name")
    ret = CiftiStatsOutputs(
    )
    execution.run(cargs)
    return ret
