# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T19:06:12.811015

import typing

from ..styxdefs import *


CIFTI_RESAMPLE_METADATA = Metadata(
    id="8e4dcb1feafa28e912c2570591952a5cdefb1549",
    name="cifti-resample",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiResampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_resample(...)`.
    """
    cifti_out: OutputPathType
    """the output cifti file"""


def cifti_resample(
    runner: Runner,
    cifti_in: InputPathType,
    direction: str,
    cifti_template: InputPathType,
    template_direction: str,
    surface_method: str,
    volume_method: str,
    cifti_out: InputPathType,
    opt_surface_largest: bool = False,
    opt_volume_predilate_dilate_mm: float | int | None = None,
    opt_surface_postdilate_dilate_mm: float | int | None = None,
    opt_affine_affine_file: str | None = None,
    opt_warpfield_warpfield: str | None = None,
) -> CiftiResampleOutputs:
    """
    RESAMPLE A CIFTI FILE TO A NEW CIFTI SPACE.
    
    Resample cifti data to a different brainordinate space. Use COLUMN for the
    direction to resample dscalar, dlabel, or dtseries. Resampling both
    dimensions of a dconn requires running this command twice, once with COLUMN
    and once with ROW. If you are resampling a dconn and your machine has a
    large amount of memory, you might consider using
    -cifti-resample-dconn-memory to avoid writing and rereading an intermediate
    file. The <template-direction> argument should usually be COLUMN, as
    dtseries, dscalar, and dlabel all have brainordinates on that direction. If
    spheres are not specified for a surface structure which exists in the cifti
    files, its data is copied without resampling or dilation. Dilation is done
    with the 'nearest' method, and is done on <new-sphere> for surface data.
    Volume components are padded before dilation so that dilation doesn't run
    into the edge of the component bounding box. If neither -affine nor
    -warpfield are specified, the identity transform is assumed for the volume
    data.
    
    The recommended resampling methods are ADAP_BARY_AREA and CUBIC (cubic
    spline), except for label data which should use ADAP_BARY_AREA and
    ENCLOSING_VOXEL. Using ADAP_BARY_AREA requires specifying an area option to
    each used -*-spheres option.
    
    The <volume-method> argument must be one of the following:
    
    CUBIC
    ENCLOSING_VOXEL
    TRILINEAR
    
    The <surface-method> argument must be one of the following:
    
    ADAP_BARY_AREA
    BARYCENTRIC
    
    Args:
        runner: Command runner
        cifti_in: the cifti file to resample
        direction: the direction of the input that should be resampled, ROW or
            COLUMN
        cifti_template: a cifti file containing the cifti space to resample to
        template_direction: the direction of the template to use as the
            resampling space, ROW or COLUMN
        surface_method: specify a surface resampling method
        volume_method: specify a volume interpolation method
        cifti_out: the output cifti file
        opt_surface_largest: use largest weight instead of weighted average or
            popularity when doing surface resampling
        opt_volume_predilate_dilate_mm: dilate the volume components before
            resampling: distance, in mm, to dilate
        opt_surface_postdilate_dilate_mm: dilate the surface components after
            resampling: distance, in mm, to dilate
        opt_affine_affine_file: use an affine transformation on the volume
            components: the affine file to use
        opt_warpfield_warpfield: use a warpfield on the volume components: the
            warpfield to use
    Returns:
        NamedTuple of outputs (described in `CiftiResampleOutputs`).
    """
    execution = runner.start_execution(CIFTI_RESAMPLE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-resample")
    cargs.append(execution.input_file(cifti_in))
    cargs.append(direction)
    cargs.append(execution.input_file(cifti_template))
    cargs.append(template_direction)
    cargs.append(surface_method)
    cargs.append(volume_method)
    cargs.append(execution.input_file(cifti_out))
    if opt_surface_largest:
        cargs.append("-surface-largest")
    if opt_volume_predilate_dilate_mm is not None:
        cargs.extend(["-volume-predilate", str(opt_volume_predilate_dilate_mm)])
    if opt_surface_postdilate_dilate_mm is not None:
        cargs.extend(["-surface-postdilate", str(opt_surface_postdilate_dilate_mm)])
    if opt_affine_affine_file is not None:
        cargs.extend(["-affine", opt_affine_affine_file])
    if opt_warpfield_warpfield is not None:
        cargs.extend(["-warpfield", opt_warpfield_warpfield])
    ret = CiftiResampleOutputs(
        cifti_out=execution.output_file(f"{cifti_out}"),
    )
    execution.run(cargs)
    return ret
