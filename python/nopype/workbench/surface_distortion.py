# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:56:52.792083

import typing

from ..styxdefs import *


SURFACE_DISTORTION_METADATA = Metadata(
    id="177dee4d4e6185bb55da0701268966d714f10f0e",
    name="surface-distortion",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class SurfaceDistortionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surface_distortion(...)`.
    """
    metric_out: OutputPathType
    """the output distortion metric"""


def surface_distortion(
    runner: Runner,
    surface_reference: InputPathType,
    surface_distorted: InputPathType,
    metric_out: InputPathType,
    opt_smooth_sigma: float | int | None = None,
    opt_caret5_method: bool = False,
    opt_edge_method: bool = False,
    opt_local_affine_method: bool = False,
) -> SurfaceDistortionOutputs:
    """
    MEASURE DISTORTION BETWEEN SURFACES.
    
    This command, when not using -caret5-method, -edge-method, or
    -local-affine-method, is equivalent to using -surface-vertex-areas on each
    surface, smoothing both output metrics with the GEO_GAUSS_EQUAL method on
    the surface they came from if -smooth is specified, and then using the
    formula 'ln(distorted/reference)/ln(2)' on the smoothed results.
    
    When using -caret5-method, it uses the surface distortion method from
    caret5, which takes the base 2 log of the ratio of tile areas, then averages
    those results at each vertex, and then smooths the result on the reference
    surface.
    
    When using -edge-method, the -smooth option is ignored, and the output at
    each vertex is the average of 'abs(ln(refEdge/distortEdge)/ln(2))' over all
    edges connected to the vertex.
    
    When using -local-affine-method, the -smooth option is ignored. The output
    is two columns, the first is the area distortion ratio, and the second is
    anisotropic strain. These are calculated by an affine transform between
    matching triangles, and then averaged across the triangles of a vertex.
    
    Args:
        runner: Command runner
        surface_reference: the reference surface
        surface_distorted: the distorted surface
        metric_out: the output distortion metric
        opt_smooth_sigma: smooth the area data: the size of the smoothing kernel
            in mm, as sigma by default
        opt_caret5_method: use the surface distortion method from caret5
        opt_edge_method: calculate distortion of edge lengths rather than areas
        opt_local_affine_method: calculate distortion by the local affines
            between triangles
    Returns:
        NamedTuple of outputs (described in `SurfaceDistortionOutputs`).
    """
    execution = runner.start_execution(SURFACE_DISTORTION_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-surface-distortion")
    cargs.append(execution.input_file(surface_reference))
    cargs.append(execution.input_file(surface_distorted))
    cargs.append(execution.input_file(metric_out))
    if opt_smooth_sigma is not None:
        cargs.extend(["-smooth", str(opt_smooth_sigma)])
    if opt_caret5_method:
        cargs.append("-caret5-method")
    if opt_edge_method:
        cargs.append("-edge-method")
    if opt_local_affine_method:
        cargs.append("-local-affine-method")
    ret = SurfaceDistortionOutputs(
        metric_out=execution.output_file(f"{metric_out}"),
    )
    execution.run(cargs)
    return ret
