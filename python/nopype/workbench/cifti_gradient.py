# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:56:52.782397

import typing

from ..styxdefs import *


CIFTI_GRADIENT_METADATA = Metadata(
    id="90c18073742b321e4054185ecdc1babd801e92d5",
    name="cifti-gradient",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiGradientOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_gradient(...)`.
    """
    cifti_out: OutputPathType
    """the output cifti"""


def cifti_gradient(
    runner: Runner,
    cifti: InputPathType,
    direction: str,
    cifti_out: InputPathType,
    opt_left_surface_surface: InputPathType | None = None,
    opt_right_surface_surface: InputPathType | None = None,
    opt_cerebellum_surface_surface: InputPathType | None = None,
    opt_surface_presmooth_surface_kernel: float | int | None = None,
    opt_volume_presmooth_volume_kernel: float | int | None = None,
    opt_presmooth_fwhm: bool = False,
    opt_average_output: bool = False,
    opt_vectors: bool = False,
) -> CiftiGradientOutputs:
    """
    TAKE GRADIENT OF A CIFTI FILE.
    
    Performs gradient calculation on each component of the cifti file, and
    optionally averages the resulting gradients. The -vectors and
    -average-output options may not be used together. You must specify a surface
    for each surface structure in the cifti file. The COLUMN direction should be
    faster, and is the direction that works on dtseries. For dconn, you probably
    want ROW, unless you are using -average-output.
    
    Args:
        runner: Command runner
        cifti: the input cifti
        direction: which dimension to take the gradient along, ROW or COLUMN
        cifti_out: the output cifti
        opt_left_surface_surface: specify the left surface to use: the left
            surface file
        opt_right_surface_surface: specify the right surface to use: the right
            surface file
        opt_cerebellum_surface_surface: specify the cerebellum surface to use:
            the cerebellum surface file
        opt_surface_presmooth_surface_kernel: smooth on the surface before
            computing the gradient: the size of the gaussian surface smoothing
            kernel in mm, as sigma by default
        opt_volume_presmooth_volume_kernel: smooth on the surface before
            computing the gradient: the size of the gaussian volume smoothing kernel
            in mm, as sigma by default
        opt_presmooth_fwhm: smoothing kernel sizes are FWHM, not sigma
        opt_average_output: output the average of the gradient magnitude maps
            instead of each gradient map separately
        opt_vectors: output gradient vectors
    Returns:
        NamedTuple of outputs (described in `CiftiGradientOutputs`).
    """
    execution = runner.start_execution(CIFTI_GRADIENT_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-gradient")
    cargs.append(execution.input_file(cifti))
    cargs.append(direction)
    cargs.append(execution.input_file(cifti_out))
    if opt_left_surface_surface is not None:
        cargs.extend(["-left-surface", execution.input_file(opt_left_surface_surface)])
    if opt_right_surface_surface is not None:
        cargs.extend(["-right-surface", execution.input_file(opt_right_surface_surface)])
    if opt_cerebellum_surface_surface is not None:
        cargs.extend(["-cerebellum-surface", execution.input_file(opt_cerebellum_surface_surface)])
    if opt_surface_presmooth_surface_kernel is not None:
        cargs.extend(["-surface-presmooth", str(opt_surface_presmooth_surface_kernel)])
    if opt_volume_presmooth_volume_kernel is not None:
        cargs.extend(["-volume-presmooth", str(opt_volume_presmooth_volume_kernel)])
    if opt_presmooth_fwhm:
        cargs.append("-presmooth-fwhm")
    if opt_average_output:
        cargs.append("-average-output")
    if opt_vectors:
        cargs.append("-vectors")
    ret = CiftiGradientOutputs(
        cifti_out=execution.output_file(f"{cifti_out}"),
    )
    execution.run(cargs)
    return ret
