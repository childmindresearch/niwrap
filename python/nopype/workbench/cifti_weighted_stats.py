# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:55.968337

import typing

from ..styxdefs import *


CIFTI_WEIGHTED_STATS_METADATA = Metadata(
    id="0fe434d729ec52fe0121a562e1fd60ee8a236524",
    name="cifti-weighted-stats",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class CiftiWeightedStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `cifti_weighted_stats(...)`.
    """


def cifti_weighted_stats(
    runner: Runner,
    cifti_in: InputPathType,
    opt_spatial_weights: bool = False,
    opt_cifti_weights_weight_cifti: InputPathType | None = None,
    opt_column_column: float | int | None = None,
    opt_roi_roi_cifti: InputPathType | None = None,
    opt_mean: bool = False,
    opt_stdev: bool = False,
    opt_percentile_percent: float | int | None = None,
    opt_sum: bool = False,
    opt_show_map_name: bool = False,
) -> CiftiWeightedStatsOutputs:
    """
    WEIGHTED STATISTICS ALONG CIFTI COLUMNS.
    
    If the mapping along column is brain models, for each column of the input,
    the specified operation is done on each surface and across all voxels, and
    the results are printed on separate lines. For other mapping types, the
    operation is done on each column, and one line per map is printed. Exactly
    one of -spatial-weights or -cifti-weights must be specified. Use -column to
    only give output for a single column. If the -roi option is used without
    -match-maps, then each line will contain as many numbers as there are maps
    in the ROI file, separated by tab characters. Exactly one of -mean, -stdev,
    -percentile or -sum must be specified.
    
    Using -sum with -spatial-weights (or with -cifti-weights and a cifti
    containing weights of similar meaning) is equivalent to integrating with
    respect to area and volume. When the input is binary ROIs, this will
    therefore output the area or volume of each ROI.
    
    Args:
        runner: Command runner
        cifti_in: the input cifti
        opt_spatial_weights: use vertex area and voxel volume as weights
        opt_cifti_weights_weight_cifti: use a cifti file containing weights: the
            weights to use, as a cifti file
        opt_column_column: only display output for one column: the column to use
            (1-based)
        opt_roi_roi_cifti: only consider data inside an roi: the roi, as a cifti
            file
        opt_mean: compute weighted mean
        opt_stdev: compute weighted standard deviation
        opt_percentile_percent: compute weighted percentile: the percentile to
            find, must be between 0 and 100
        opt_sum: compute weighted sum
        opt_show_map_name: print map index and name before each output
    Returns:
        NamedTuple of outputs (described in `CiftiWeightedStatsOutputs`).
    """
    execution = runner.start_execution(CIFTI_WEIGHTED_STATS_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-cifti-weighted-stats")
    cargs.append(execution.input_file(cifti_in))
    if opt_spatial_weights:
        cargs.append("-spatial-weights")
    if opt_cifti_weights_weight_cifti is not None:
        cargs.extend(["-cifti-weights", execution.input_file(opt_cifti_weights_weight_cifti)])
    if opt_column_column is not None:
        cargs.extend(["-column", str(opt_column_column)])
    if opt_roi_roi_cifti is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_cifti)])
    if opt_mean:
        cargs.append("-mean")
    if opt_stdev:
        cargs.append("-stdev")
    if opt_percentile_percent is not None:
        cargs.extend(["-percentile", str(opt_percentile_percent)])
    if opt_sum:
        cargs.append("-sum")
    if opt_show_map_name:
        cargs.append("-show-map-name")
    ret = CiftiWeightedStatsOutputs(
    )
    execution.run(cargs)
    return ret
