# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:56:52.640675

import typing

from ..styxdefs import *


VOLUME_PARCEL_SMOOTHING_METADATA = Metadata(
    id="14bd25d6b2453b4cb4fbe39a38d0450263b21f35",
    name="volume-parcel-smoothing",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class VolumeParcelSmoothingOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_parcel_smoothing(...)`.
    """
    volume_out: OutputPathType
    """the output volume"""


def volume_parcel_smoothing(
    runner: Runner,
    data_volume: InputPathType,
    label_volume: InputPathType,
    kernel: float | int,
    volume_out: InputPathType,
    opt_fwhm: bool = False,
    opt_fix_zeros: bool = False,
    opt_subvolume_subvol: str | None = None,
) -> VolumeParcelSmoothingOutputs:
    """
    SMOOTH PARCELS IN A VOLUME SEPARATELY.
    
    The volume is smoothed within each label in the label volume using data only
    from within the label. Equivalent to running volume smoothing with ROIs
    matching each label separately, then adding the resulting volumes, but
    faster.
    
    Args:
        runner: Command runner
        data_volume: the volume to smooth
        label_volume: a label volume containing the parcels to smooth
        kernel: the size of the gaussian smoothing kernel in mm, as sigma by
            default
        volume_out: the output volume
        opt_fwhm: smoothing kernel size is FWHM, not sigma
        opt_fix_zeros: treat zero values as not being data
        opt_subvolume_subvol: select a single subvolume to smooth: the subvolume
            number or name
    Returns:
        NamedTuple of outputs (described in `VolumeParcelSmoothingOutputs`).
    """
    execution = runner.start_execution(VOLUME_PARCEL_SMOOTHING_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-parcel-smoothing")
    cargs.append(execution.input_file(data_volume))
    cargs.append(execution.input_file(label_volume))
    cargs.append(str(kernel))
    cargs.append(execution.input_file(volume_out))
    if opt_fwhm:
        cargs.append("-fwhm")
    if opt_fix_zeros:
        cargs.append("-fix-zeros")
    if opt_subvolume_subvol is not None:
        cargs.extend(["-subvolume", opt_subvolume_subvol])
    ret = VolumeParcelSmoothingOutputs(
        volume_out=execution.output_file(f"{volume_out}"),
    )
    execution.run(cargs)
    return ret
