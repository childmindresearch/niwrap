# This file was auto generated by styx
# Do not edit this file directly

import typing

from ..styxdefs import *


VOLUME_ERODE_METADATA = Metadata(
    id="4c1cfa317001a766cefe377a064012d6aa840abe",
    name="volume-erode",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class VolumeErodeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_erode(...)`.
    """
    volume_out: OutputPathType
    """the output volume"""


def volume_erode(
    runner: Runner,
    volume: InputPathType,
    distance: float | int,
    volume_out: InputPathType,
    opt_roi_roi_volume: InputPathType | None = None,
    opt_subvolume_subvol: str | None = None,
) -> VolumeErodeOutputs:
    """
    ERODE A VOLUME FILE.
    
    Around each voxel with a value of zero, set surrounding voxels to zero. The
    surrounding voxels are all face neighbors and all voxels within the
    specified distance (center to center).
    
    Args:
        runner: Command runner
        volume: the volume to erode
        distance: distance in mm to erode
        volume_out: the output volume
        opt_roi_roi_volume: assume voxels outside this roi are nonzero: volume
            file, positive values denote voxels that have data
        opt_subvolume_subvol: select a single subvolume to dilate: the subvolume
            number or name
    Returns:
        NamedTuple of outputs (described in `VolumeErodeOutputs`).
    """
    execution = runner.start_execution(VOLUME_ERODE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-erode")
    cargs.append(execution.input_file(volume))
    cargs.append(str(distance))
    cargs.append(execution.input_file(volume_out))
    if opt_roi_roi_volume is not None:
        cargs.extend(["-roi", execution.input_file(opt_roi_roi_volume)])
    if opt_subvolume_subvol is not None:
        cargs.extend(["-subvolume", opt_subvolume_subvol])
    ret = VolumeErodeOutputs(
        volume_out=execution.output_file(f"{volume_out}"),
    )
    execution.run(cargs)
    return ret
