# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:56:52.683985

import typing

from ..styxdefs import *


BORDER_TO_ROIS_METADATA = Metadata(
    id="8aab633faca9ce8df8495f4582e27e5f9f7b9a44",
    name="border-to-rois",
    container_image_type="docker",
    container_image_tag="mcin/docker-fsl:latest",
)


class BorderToRoisOutputs(typing.NamedTuple):
    """
    Output object returned when calling `border_to_rois(...)`.
    """
    metric_out: OutputPathType
    """the output metric file"""


def border_to_rois(
    runner: Runner,
    surface: InputPathType,
    border_file: InputPathType,
    metric_out: InputPathType,
    opt_border_name: str | None = None,
    opt_inverse: bool = False,
    opt_include_border: bool = False,
) -> BorderToRoisOutputs:
    """
    MAKE METRIC ROIS FROM BORDERS.
    
    By default, draws ROIs inside all borders in the border file, as separate
    metric columns.
    
    Args:
        runner: Command runner
        surface: the surface the borders are drawn on
        border_file: the border file
        metric_out: the output metric file
        opt_border_name: create ROI for only one border: the name of the border
        opt_inverse: use inverse selection (outside border)
        opt_include_border: include vertices the border is closest to
    Returns:
        NamedTuple of outputs (described in `BorderToRoisOutputs`).
    """
    execution = runner.start_execution(BORDER_TO_ROIS_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-border-to-rois")
    cargs.append(execution.input_file(surface))
    cargs.append(execution.input_file(border_file))
    cargs.append(execution.input_file(metric_out))
    if opt_border_name is not None:
        cargs.extend(["-border", opt_border_name])
    if opt_inverse:
        cargs.append("-inverse")
    if opt_include_border:
        cargs.append("-include-border")
    ret = BorderToRoisOutputs(
        metric_out=execution.output_file(f"{metric_out}"),
    )
    execution.run(cargs)
    return ret
