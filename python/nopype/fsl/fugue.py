# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:56.019559

import typing

from ..styxdefs import *


FUGUE_METADATA = Metadata(
    id="30806a1150bbff318791a03c76e4b24c98eb7d9f",
    name="FUGUE",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class FugueOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fugue(...)`.
    """
    fmap_out_file_outfile: OutputPathType
    """Fieldmap file."""
    shift_out_file_outfile: OutputPathType
    """Voxel shift map file."""
    unwarped_file_outfile: OutputPathType
    """Unwarped file."""
    warped_file_outfile: OutputPathType
    """Forward warped file."""


def fugue(
    runner: Runner,
    asym_se_time: float | int | None = None,
    despike_2dfilter: bool = False,
    despike_threshold: float | int | None = None,
    dwell_time: float | int | None = None,
    dwell_to_asym_ratio: float | int | None = None,
    fmap_in_file: InputPathType | None = None,
    fmap_out_file: InputPathType | None = None,
    forward_warping: bool = False,
    fourier_order: int | None = None,
    icorr: bool = False,
    icorr_only: bool = False,
    in_file: InputPathType | None = None,
    mask_file: InputPathType | None = None,
    median_2dfilter: bool = False,
    no_extend: bool = False,
    no_gap_fill: bool = False,
    nokspace: bool = False,
    output_type: typing.Literal["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"] | None = None,
    pava: bool = False,
    phase_conjugate: bool = False,
    phasemap_in_file: InputPathType | None = None,
    poly_order: int | None = None,
    save_fmap: bool = False,
    save_shift: bool = False,
    save_unmasked_fmap: bool = False,
    save_unmasked_shift: bool = False,
    shift_in_file: InputPathType | None = None,
    shift_out_file: InputPathType | None = None,
    smooth2d: float | int | None = None,
    smooth3d: float | int | None = None,
    unwarp_direction: typing.Literal["x", "y", "z", "x-", "y-", "z-"] | None = None,
    unwarped_file: InputPathType | None = None,
    warped_file: InputPathType | None = None,
) -> FugueOutputs:
    """
    FUGUE, as implemented in Nipype (module: nipype.interfaces.fsl, interface:
    FUGUE).
    FSL FUGUE set of tools for EPI distortion correction
    `FUGUE <http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FUGUE>`_ is, most generally, a
    set of tools for EPI distortion correction.
    Distortions may be corrected for 1. improving registration with
    non-distorted images (e.g. structurals), or 2. dealing with motion-dependent
    changes.
    FUGUE is designed to deal only with the first case - improving registration.
    
    Args:
        runner: Command runner
        asym_se_time: Set the fieldmap asymmetric spin echo time (sec).
        despike_2dfilter: Apply a 2d de-spiking filter.
        despike_threshold: Specify the threshold for de-spiking (default=3.0).
        dwell_time: Set the epi dwell time per phase-encode line - same as echo
            spacing - (sec).
        dwell_to_asym_ratio: Set the dwell to asym time ratio.
        fmap_in_file: Filename for loading fieldmap (rad/s).
        fmap_out_file: Filename for saving fieldmap (rad/s).
        forward_warping: Apply forward warping instead of unwarping.
        fourier_order: Apply fourier (sinusoidal) fitting of order n.
        icorr: Apply intensity correction to unwarping (pixel shift method
            only).
        icorr_only: Apply intensity correction only.
        in_file: Filename of input volume.
        mask_file: Filename for loading valid mask.
        median_2dfilter: Apply 2d median filtering.
        no_extend: Do not apply rigid-body extrapolation to the fieldmap.
        no_gap_fill: Do not apply gap-filling measure to the fieldmap.
        nokspace: Do not use k-space forward warping.
        output_type: 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'.
            Fsl output type.
        pava: Apply monotonic enforcement via pava.
        phase_conjugate: Apply phase conjugate method of unwarping.
        phasemap_in_file: Filename for input phase image.
        poly_order: Apply polynomial fitting of order n.
        save_fmap: Write field map volume.
        save_shift: Write pixel shift volume.
        save_unmasked_fmap: Saves the unmasked fieldmap when using --savefmap.
        save_unmasked_shift: Saves the unmasked shiftmap when using --saveshift.
        shift_in_file: Filename for reading pixel shift volume.
        shift_out_file: Filename for saving pixel shift volume.
        smooth2d: Apply 2d gaussian smoothing of sigma n (in mm).
        smooth3d: Apply 3d gaussian smoothing of sigma n (in mm).
        unwarp_direction: 'x' or 'y' or 'z' or 'x-' or 'y-' or 'z-'. Specifies
            direction of warping (default y).
        unwarped_file: Apply unwarping and save as filename.
        warped_file: Apply forward warping and save as filename.
    Returns:
        NamedTuple of outputs (described in `FugueOutputs`).
    """
    if (
        (warped_file is not None) +
        (unwarped_file is not None)
    ) > 1:
        raise ValueError(
            "Only one of the following arguments can be specified:\n"
            "warped_file,\n"
            "unwarped_file"
        )
    if (
        save_unmasked_shift +
        save_shift
    ) > 1:
        raise ValueError(
            "Only one of the following arguments can be specified:\n"
            "save_unmasked_shift,\n"
            "save_shift"
        )
    if (
        save_fmap +
        save_unmasked_fmap
    ) > 1:
        raise ValueError(
            "Only one of the following arguments can be specified:\n"
            "save_fmap,\n"
            "save_unmasked_fmap"
        )
    execution = runner.start_execution(FUGUE_METADATA)
    cargs = []
    cargs.append("FUGUE")
    cargs.append("[ARGS]")
    if asym_se_time is not None:
        cargs.append(("--asym=" + str(asym_se_time)))
    if despike_2dfilter:
        cargs.append("--despike")
    if despike_threshold is not None:
        cargs.append(("--despikethreshold=" + str(despike_threshold)))
    if dwell_time is not None:
        cargs.append(("--dwell=" + str(dwell_time)))
    if dwell_to_asym_ratio is not None:
        cargs.append(("--dwelltoasym=" + str(dwell_to_asym_ratio)))
    cargs.append("[ENVIRON]")
    if fmap_in_file is not None:
        cargs.append(("--loadfmap=" + execution.input_file(fmap_in_file)))
    if fmap_out_file is not None:
        cargs.append(("--savefmap=" + execution.input_file(fmap_out_file)))
    if forward_warping:
        cargs.append("--forward_warping")
    if fourier_order is not None:
        cargs.append(("--fourier=" + str(fourier_order)))
    if icorr:
        cargs.append("--icorr")
    if icorr_only:
        cargs.append("--icorronly")
    if in_file is not None:
        cargs.append(("--in=" + execution.input_file(in_file)))
    if mask_file is not None:
        cargs.append(("--mask=" + execution.input_file(mask_file)))
    if median_2dfilter:
        cargs.append("--median")
    if no_extend:
        cargs.append("--noextend")
    if no_gap_fill:
        cargs.append("--nofill")
    if nokspace:
        cargs.append("--nokspace")
    if output_type is not None:
        cargs.append(output_type)
    if pava:
        cargs.append("--pava")
    if phase_conjugate:
        cargs.append("--phaseconj")
    if phasemap_in_file is not None:
        cargs.append(("--phasemap=" + execution.input_file(phasemap_in_file)))
    if poly_order is not None:
        cargs.append(("--poly=" + str(poly_order)))
    if save_fmap:
        cargs.append("--save_fmap")
    if save_shift:
        cargs.append("--save_shift")
    if save_unmasked_fmap:
        cargs.append("--unmaskfmap")
    if save_unmasked_shift:
        cargs.append("--unmaskshift")
    if shift_in_file is not None:
        cargs.append(("--loadshift=" + execution.input_file(shift_in_file)))
    if shift_out_file is not None:
        cargs.append(("--saveshift=" + execution.input_file(shift_out_file)))
    if smooth2d is not None:
        cargs.append(("--smooth2=" + str(smooth2d)))
    if smooth3d is not None:
        cargs.append(("--smooth3=" + str(smooth3d)))
    if unwarp_direction is not None:
        cargs.append(("--unwarpdir=" + unwarp_direction))
    if unwarped_file is not None:
        cargs.append(("--unwarp=" + execution.input_file(unwarped_file)))
    if warped_file is not None:
        cargs.append(("--warp=" + execution.input_file(warped_file)))
    ret = FugueOutputs(
        fmap_out_file_outfile=execution.output_file(f"{fmap_out_file}", optional=True),
        shift_out_file_outfile=execution.output_file(f"{shift_out_file}", optional=True),
        unwarped_file_outfile=execution.output_file(f"{unwarped_file}", optional=True),
        warped_file_outfile=execution.output_file(f"{warped_file}", optional=True),
    )
    execution.run(cargs)
    return ret
