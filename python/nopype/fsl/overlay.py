# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T19:06:12.896034

import typing

from ..styxdefs import *


OVERLAY_METADATA = Metadata(
    id="192f8f797c9d77d0bebe728d52daee84cda8319d",
    name="Overlay",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class OverlayOutputs(typing.NamedTuple):
    """
    Output object returned when calling `overlay(...)`.
    """
    out_file_outfile: OutputPathType
    """Combined image volume."""


def overlay(
    runner: Runner,
    background_image: InputPathType,
    bg_thresh: list[float | int],
    stat_image: InputPathType,
    stat_thresh: list[float | int],
    auto_thresh_bg: bool = False,
    full_bg_range: bool = False,
    out_file: InputPathType | None = None,
    out_type: typing.Literal["float", "int"] | None = "float",
    output_type: typing.Literal["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"] | None = None,
    stat_image2: InputPathType | None = None,
    stat_thresh2: list[float | int] = None,
    use_checkerboard: bool = False,
) -> OverlayOutputs:
    """
    Overlay, as implemented in Nipype (module: nipype.interfaces.fsl, interface:
    Overlay).
    Use FSL's overlay command to combine background and statistical images into
    one volume
    
    Args:
        runner: Command runner
        background_image: Image to use as background.
        bg_thresh: (a float, a float). Min and max values for background
            intensity.
        stat_image: Statistical image to overlay in color.
        stat_thresh: (a float, a float). Min and max values for the statistical
            overlay.
        auto_thresh_bg: Automatically threshold the background image.
        full_bg_range: Use full range of background image.
        out_file: Combined image volume.
        out_type: 'float' or 'int'. Write output with float or int.
        output_type: 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'.
            Fsl output type.
        stat_image2: Second statistical image to overlay in color.
        stat_thresh2: (a float, a float). Min and max values for second
            statistical overlay.
        use_checkerboard: Use checkerboard mask for overlay.
    Returns:
        NamedTuple of outputs (described in `OverlayOutputs`).
    """
    if (len(bg_thresh) != 2): 
        raise ValueError(f"Length of 'bg_thresh' must be 2 but was {len(bg_thresh)}")
    if (len(stat_thresh) != 2): 
        raise ValueError(f"Length of 'stat_thresh' must be 2 but was {len(stat_thresh)}")
    if stat_thresh2 is not None and (len(stat_thresh2) != 2): 
        raise ValueError(f"Length of 'stat_thresh2' must be 2 but was {len(stat_thresh2)}")
    if (
        (bg_thresh is not None) +
        full_bg_range +
        auto_thresh_bg
    ) > 1:
        raise ValueError(
            "Only one of the following arguments can be specified:\n"
            "bg_thresh,\n"
            "full_bg_range,\n"
            "auto_thresh_bg"
        )
    if (
        (stat_image2 is not None)
    ) > 1:
        raise ValueError(
            "Only one of the following arguments can be specified:\n"
            "stat_image2"
        )
    execution = runner.start_execution(OVERLAY_METADATA)
    cargs = []
    cargs.append("Overlay")
    cargs.append("[TRANSPARENCY]")
    if out_type is not None:
        cargs.append(out_type)
    if use_checkerboard:
        cargs.append("-c")
    cargs.append(execution.input_file(background_image))
    if full_bg_range:
        cargs.append("-A")
    cargs.append(execution.input_file(stat_image))
    cargs.extend(map(str, stat_thresh))
    cargs.append("[SHOW_NEGATIVE_STATS]")
    if stat_image2 is not None:
        cargs.append(execution.input_file(stat_image2))
    if stat_thresh2 is not None:
        cargs.extend(map(str, stat_thresh2))
    if out_file is not None:
        cargs.append(execution.input_file(out_file))
    cargs.append("[ARGS]")
    cargs.append("[ENVIRON]")
    if output_type is not None:
        cargs.append(output_type)
    ret = OverlayOutputs(
        out_file_outfile=execution.output_file(f"{out_file}", optional=True),
    )
    execution.run(cargs)
    return ret
