# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:56.044726

import typing

from ..styxdefs import *


FSL_ROI_METADATA = Metadata(
    id="8e13c16201a231462934e54bd82e0fbf91812293",
    name="FSL roi",
    container_image_type="docker",
    container_image_tag="fcpindi/c-pac:latest",
)


class FslRoiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fsl_roi(...)`.
    """
    roi_file_outfile: OutputPathType
    """Output ROI file."""


def fsl_roi(
    runner: Runner,
    in_file: InputPathType,
    roi_file: str,
    t_min: int | None = None,
    t_size: int | None = None,
    x_min: int | None = None,
    x_size: int | None = None,
    y_min: int | None = None,
    y_size: int | None = None,
    z_min: int | None = None,
    z_size: int | None = None,
) -> FslRoiOutputs:
    """
    fslroi, as implemented in Nipype (module: nipype.interfaces.fsl.utils,
    interface: ExtractROI).
    Uses FSL Fslroi command to extract region of interest (ROI) from an image.
    You can a) take a 3D ROI from a 3D data set (or if it is 4D, the same ROI is
    taken from each time point and a new 4D data set is created), b) extract
    just some time points from a 4D data set, or c) control time and space
    limits to the ROI. Note that the arguments are minimum index and size (not
    maximum index). So to extract voxels 10 to 12 inclusive you would specify 10
    and 3 (not 10 and 12).
    
    Args:
        runner: Command runner
        in_file: Input image to extract ROI from.
        roi_file: Output ROI file.
        t_min: Minimum index for t-dimension.
        t_size: Size of ROI in t-dimension.
        x_min: Minimum index for x-dimension.
        x_size: Size of ROI for x-dimension.
        y_min: Minimum index for y-dimension.
        y_size: Size of ROI for y-dimension.
        z_min: Minimum index for z-dimension.
        z_size: Size of ROI for z-dimension.
    Returns:
        NamedTuple of outputs (described in `FslRoiOutputs`).
    """
    execution = runner.start_execution(FSL_ROI_METADATA)
    cargs = []
    cargs.append("fslroi")
    cargs.append(execution.input_file(in_file))
    cargs.append(roi_file)
    if x_min is not None:
        cargs.append(str(x_min))
    if x_size is not None:
        cargs.append(str(x_size))
    if y_min is not None:
        cargs.append(str(y_min))
    if y_size is not None:
        cargs.append(str(y_size))
    if z_min is not None:
        cargs.append(str(z_min))
    if z_size is not None:
        cargs.append(str(z_size))
    if t_min is not None:
        cargs.append(str(t_min))
    if t_size is not None:
        cargs.append(str(t_size))
    ret = FslRoiOutputs(
        roi_file_outfile=execution.output_file(f"{roi_file}.nii.gz", optional=True),
    )
    execution.run(cargs)
    return ret
