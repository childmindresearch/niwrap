# This file was auto generated by styx-boutiques-codegen
# Do not edit this file directly
# Timestamp: 2024-05-16T18:58:56.068615

import typing

from ..styxdefs import *


ANTS_BRAIN_EXTRACTION_SH_METADATA = Metadata(
    id="5a42f7bc2f891cb4517c6377dc9645f62671e9e0",
    name="antsBrainExtraction.sh",
    container_image_type="docker",
    container_image_tag="antsx/ants",
)


class AntsBrainExtractionShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ants_brain_extraction_sh(...)`.
    """
    brain_extracted_image: OutputPathType
    """Brain extracted image"""
    brain_mask: OutputPathType
    """Brain mask"""
    brain_probability_mask: OutputPathType
    """Brain probability mask"""


def ants_brain_extraction_sh(
    runner: Runner,
    anatomical_image: InputPathType,
    template: InputPathType,
    probability_mask: InputPathType,
    output_prefix: str | None = "output",
    image_dimension: int = 3,
    tissue_classification: str | None = None,
    brain_extraction_registration_mask: InputPathType | None = None,
    keep_temporary_files: bool = False,
    single_floating_point_precision: bool = False,
    initial_moving_transform: InputPathType | None = None,
    rotation_search_params: str | None = None,
    image_file_suffix: str | None = None,
    translation_search_params: str | None = None,
    random_seeding: bool = False,
    debug_mode: bool = False,
) -> AntsBrainExtractionShOutputs:
    """
    antsBrainExtraction.sh is a script from Advanced Normalization Tools (ANTs) for
    template-based brain extraction.
    
    Args:
        runner: Command runner
        anatomical_image: Anatomical image (Structural image, typically T1)
        template: Brain extraction template (Anatomical template)
        probability_mask: Brain extraction probability mask
        output_prefix: Output prefix
        image_dimension: Image dimension (2 or 3)
        tissue_classification: Tissue classification
        brain_extraction_registration_mask: Brain extraction registration mask
        keep_temporary_files: Keep temporary files
        single_floating_point_precision: Use single floating point precision
        initial_moving_transform: Initial moving transform
        rotation_search_params: Rotation search parameters
        image_file_suffix: Image file suffix
        translation_search_params: Translation search parameters
        random_seeding: Use random seeding
        debug_mode: Test / debug mode
    Returns:
        NamedTuple of outputs (described in `AntsBrainExtractionShOutputs`).
    """
    execution = runner.start_execution(ANTS_BRAIN_EXTRACTION_SH_METADATA)
    cargs = []
    cargs.append("export")
    cargs.append("PATH=$PATH:/opt/ants/bin")
    cargs.append("&&")
    cargs.append("antsBrainExtraction.sh")
    cargs.append("-d")
    cargs.append(str(image_dimension))
    cargs.append("-a")
    cargs.append(execution.input_file(anatomical_image))
    cargs.append("-e")
    cargs.append(execution.input_file(template))
    cargs.append("-m")
    cargs.append(execution.input_file(probability_mask))
    if tissue_classification is not None:
        cargs.extend(["-c", tissue_classification])
    if brain_extraction_registration_mask is not None:
        cargs.extend(["-f", execution.input_file(brain_extraction_registration_mask)])
    if keep_temporary_files:
        cargs.append("-k")
    if single_floating_point_precision:
        cargs.append("-q")
    if initial_moving_transform is not None:
        cargs.extend(["-r", execution.input_file(initial_moving_transform)])
    if rotation_search_params is not None:
        cargs.extend(["-R", rotation_search_params])
    if image_file_suffix is not None:
        cargs.extend(["-s", image_file_suffix])
    if translation_search_params is not None:
        cargs.extend(["-T", translation_search_params])
    if random_seeding:
        cargs.append("-u")
    if debug_mode:
        cargs.append("-z")
    cargs.append("-o")
    if output_prefix is not None:
        cargs.append(output_prefix)
    ret = AntsBrainExtractionShOutputs(
        brain_extracted_image=execution.output_file(f"{output_prefix}BrainExtractionBrain.nii.gz"),
        brain_mask=execution.output_file(f"{output_prefix}BrainExtractionMask.nii.gz"),
        brain_probability_mask=execution.output_file(f"{output_prefix}BrainExtractionPrior0GenericAffine.mat"),
    )
    execution.run(cargs)
    return ret
