# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

SURF_RETINO_MAP_METADATA = Metadata(
    id="0a0bd510fbdb86c742b4ce55d2755f1f8650721e.boutiques",
    name="SurfRetinoMap",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


class SurfRetinoMapOutputs(typing.NamedTuple):
    """
    Output object returned when calling `surf_retino_map(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    vfr_output: OutputPathType | None
    """Output Visual Field Ratio (VFR) dataset."""
    threshold_max_output: OutputPathType | None
    """Maximum threshold at each node in the input datasets."""


def surf_retino_map(
    surface: str,
    polar: str,
    eccentricity: str,
    prefix: str | None = None,
    node_debug: float | None = None,
    runner: Runner | None = None,
) -> SurfRetinoMapOutputs:
    """
    Tool for retinotopic mapping on cortical surfaces.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        surface: Surface on which distances are computed. See 'Specifying input\
            surfaces' section for syntax.
        polar: Retinotopic dataset: polar angle dataset.
        eccentricity: Retinotopic dataset: eccentricity angle dataset.
        prefix: Prefix for output datasets.
        node_debug: Index of node number for which debugging information is\
            output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfRetinoMapOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURF_RETINO_MAP_METADATA)
    cargs = []
    cargs.append("SurfRetinoMap")
    cargs.append(surface)
    cargs.append(polar)
    cargs.append(eccentricity)
    if prefix is not None:
        cargs.extend([
            "--prefix",
            prefix
        ])
    if node_debug is not None:
        cargs.extend([
            "--node_dbg",
            str(node_debug)
        ])
    ret = SurfRetinoMapOutputs(
        root=execution.output_file("."),
        vfr_output=execution.output_file(prefix + "_VFR.nii.gz") if (prefix is not None) else None,
        threshold_max_output=execution.output_file(prefix + "_threshold_max.nii.gz") if (prefix is not None) else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SURF_RETINO_MAP_METADATA",
    "SurfRetinoMapOutputs",
    "surf_retino_map",
]
