# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

MRI_DEFACER_METADATA = Metadata(
    id="46f94f77407f2c0b404818493966409a1d748b0f.boutiques",
    name="mri_defacer",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


class MriDefacerOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_defacer(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_defacer(
    input_volume: InputPathType,
    headmask: InputPathType,
    tempsurf: InputPathType,
    defaced_volume: str,
    templabel: list[InputPathType] | None = None,
    watermark: float | None = None,
    facemask: str | None = None,
    fill_constants: list[float] | None = None,
    exclude_mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> MriDefacerOutputs:
    """
    Tool for defacing MRI images to remove facial features.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume.
        headmask: Head mask volume.
        tempsurf: Template surface file.
        defaced_volume: Output defaced volume.
        templabel: Template label, specify one or multiple labels.
        watermark: Watermark density.
        facemask: Face mask volume.
        fill_constants: Constants for filling within/outside the mask.
        exclude_mask: Mask to exclude from defacing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriDefacerOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_DEFACER_METADATA)
    cargs = []
    cargs.append("mri_defacer")
    cargs.extend([
        "-i",
        "-" + execution.input_file(input_volume)
    ])
    cargs.extend([
        "-hm",
        "-" + execution.input_file(headmask)
    ])
    cargs.extend([
        "-ts",
        "-" + execution.input_file(tempsurf)
    ])
    if templabel is not None:
        cargs.extend([
            "--l",
            *[execution.input_file(f) for f in templabel]
        ])
    if watermark is not None:
        cargs.extend([
            "--w",
            str(watermark)
        ])
    cargs.extend([
        "-o",
        "-" + defaced_volume
    ])
    if facemask is not None:
        cargs.extend([
            "--m",
            facemask
        ])
    if fill_constants is not None:
        cargs.extend([
            "--fill-const",
            *map(str, fill_constants)
        ])
    if exclude_mask is not None:
        cargs.extend([
            "--xmask",
            execution.input_file(exclude_mask)
        ])
    cargs.append("[OPTIONS]")
    ret = MriDefacerOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MRI_DEFACER_METADATA",
    "MriDefacerOutputs",
    "mri_defacer",
]
