# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

XTRACT_STATS_METADATA = Metadata(
    id="f668c4e671c6991a9aeac8ad9a7c7b80fa8f3318.boutiques",
    name="xtract_stats",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


class XtractStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `xtract_stats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    csv_output: OutputPathType
    """CSV file containing the statistics from XTRACT analysis."""


def xtract_stats(
    folder_basename: str,
    xtract_dir: str,
    xtract2diff: str,
    runner: Runner | None = None,
) -> XtractStatsOutputs:
    """
    Quantitative evaluation tool of XTRACT results in neuroimaging.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        folder_basename: Path to microstructure folder and basename of data\
            (e.g. /home/DTI/dti_).
        xtract_dir: Path to XTRACT output folder.
        xtract2diff: EITHER XTRACT results to diffusion space transform OR\
            'native' if tracts are already in diffusion space.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XtractStatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(XTRACT_STATS_METADATA)
    cargs = []
    cargs.append("xtract_stats")
    cargs.extend([
        "-d",
        folder_basename
    ])
    cargs.extend([
        "-xtract",
        xtract_dir
    ])
    cargs.extend([
        "-w",
        xtract2diff
    ])
    cargs.append("[reference]")
    cargs.append("[output_file]")
    cargs.append("[structures_file]")
    cargs.append("[threshold]")
    cargs.append("[measurements]")
    cargs.append("[keep_temp_files]")
    ret = XtractStatsOutputs(
        root=execution.output_file("."),
        csv_output=execution.output_file("<output_file>"),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "XTRACT_STATS_METADATA",
    "XtractStatsOutputs",
    "xtract_stats",
]
