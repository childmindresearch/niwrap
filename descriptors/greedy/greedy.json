{
  "name": "greedy",
  "tool-version": "1.0.1",
  "description": "Paul's greedy diffeomorphic registration implementation",
  "command-line": "greedy [DIMENSIONS] [INPUTS] [OUTPUT] [AFFINE] [BRUTE] [MOMENTS] [RESLICE] [INVERT] [ROOT] [JACOBIAN] [METRIC_MODE] [DEFOPT] [WEIGHT] [METRIC] [STEP_SIZE] [ITERATIONS] [THREADS] [FIXED_MASK] [GM_TRIM] [MOVING_MASK] [WNCC_MASK_DILATE] [REFERENCE_IMAGE] [REF_PAD] [BACKGROUND] [IT] [ZERO_LAST_DIMENSION] [TIME_STEP_MODE] [SMOOTHING] [INVERSE_WARP] [ROOT_WARP] [WARP_PRECISION] [NOISE] [EXPONENT] [SVF_MODE] [SVLB] [SV_INCOMPR] [INITIAL_WARP] [TJR] [WR] [INITIAL_AFFINE] [AFFINE_IDENTITY] [IA_VOXEL_GRID] [IA_IMAGE_CENTERS] [IA_IMAGE_SIDE] [IA_MOMENTS] [AFFINE_DOF] [JITTER] [SEARCH] [DET] [COV_ID] [RESLICE_INPUT_IMG] [RESLICE_MOVING_IMAGE] [RESLICE_SURFACE] [INTERPOLATION] [RESLICE_BACKGROUND] [RESLICE_DATATYPE] [RESLICE_COMPOSITE] [RESLICE_JACOBIAN] [RESLICE_SIMPLEX_JACOBIAN] [RESLICE_MASK] [METRIC_GRADIENT] [DEBUG_DERIV] [DEBUG_DERIV_EPS] [DEBUG_AFF_OBJ] [DUMP_PYRAMID] [DUMP_MOVING] [DUMP_FREQUENCY] [DUMP_PREFIX] [POWELL] [FLOAT] [VERSION] [VERBOSE]",
  "schema-version": "0.5",
  "container-image": {
    "image": "pyushkevich/itksnap:v3.8.2",
    "type": "docker"
  },
  "inputs": [
    {
      "id": "dimensions",
      "name": "Dimensions",
      "type": "Number",
      "integer": true,
      "command-line-flag": "-d",
      "value-key": "[DIMENSIONS]",
      "optional": false,
      "description": "Number of image dimensions"
    },
    {
      "id": "input_images",
      "name": "Input Images",
      "command-line-flag": "-i",
      "value-key": "[INPUTS]",
      "optional": true,
      "description": "Image pair (may be repeated)",
      "type": {
        "id": "input_images",
        "command-line": "[FIXED] [MOVING]",
        "inputs": [
          {
            "id": "fixed",
            "name": "Fixed Image",
            "type": "File",
            "description": "The fixed image",
            "value-key": "[FIXED]"
          },
          {
            "id": "moving",
            "name": "Moving Image",
            "type": "File",
            "description": "The moving image",
            "value-key": "[MOVING]"
          }
        ]
      }
    },
    {
      "id": "output",
      "name": "Output",
      "type": "String",
      "command-line-flag": "-o",
      "value-key": "[OUTPUT]",
      "optional": true,
      "description": "Output file (matrix in affine mode; image in deformable mode, metric computation mode; ignored in reslicing mode)"
    },
    {
      "id": "affine",
      "name": "Affine",
      "type": "Flag",
      "command-line-flag": "-a",
      "value-key": "[AFFINE]",
      "optional": true,
      "description": "Perform affine registration and save to output (-o)"
    },
    {
      "id": "brute",
      "name": "Brute Force Search",
      "type": "String",
      "command-line-flag": "-brute",
      "value-key": "[BRUTE]",
      "optional": true,
      "description": "Perform a brute force search around each voxel"
    },
    {
      "id": "moments",
      "name": "Moments of Inertia",
      "type": "Number",
      "integer": true,
      "command-line-flag": "-moments",
      "value-key": "[MOMENTS]",
      "optional": true,
      "value-choices": [1, 2],
      "description": "Perform moments of inertia rigid alignment of given order (1 or 2)"
    },
    {
      "id": "reslice",
      "name": "Reslice",
      "type": "File",
      "command-line-flag": "-r",
      "value-key": "[RESLICE]",
      "optional": true,
      "list": true,
      "description": "Reslice images instead of doing registration"
    },
    {
      "id": "invert",
      "name": "Invert Warp",
      "command-line-flag": "-iw",
      "value-key": "[INVERT]",
      "optional": true,
      "description": "Invert previously computed warp",
      "type": {
        "id": "invert",
        "command-line": "[INWARP] [OUTWARP]",
        "inputs": [
          {
            "id": "inwarp",
            "name": "Input Warp",
            "type": "File",
            "description": "The input warp to be inverted",
            "value-key": "[INWARP]"
          },
          {
            "id": "outwarp",
            "name": "Output Warp",
            "type": "String",
            "description": "The filename for the inverted warp output",
            "value-key": "[OUTWARP]"
          }
        ],
        "output-files": [
          {
            "id": "inverted_warp",
            "name": "Inverted Warp",
            "path-template": "[OUTWARP]",
            "description": "The inverted warp file"
          }
        ]
      }
    },
    {
      "id": "root",
      "name": "Root Warp",
      "command-line-flag": "-root",
      "value-key": "[ROOT]",
      "optional": true,
      "description": "Convert 2^N-th root of a warp",
      "type": {
        "id": "root",
        "command-line": "[INWARP] [OUTWARP] [N]",
        "inputs": [
          {
            "id": "inwarp",
            "name": "Input Warp",
            "type": "File",
            "description": "The input warp",
            "value-key": "[INWARP]"
          },
          {
            "id": "outwarp",
            "name": "Output Warp",
            "type": "String",
            "description": "The filename for the root warp output",
            "value-key": "[OUTWARP]"
          },
          {
            "id": "n",
            "name": "N",
            "type": "Number",
            "integer": true,
            "description": "The value of N for 2^N-th root",
            "value-key": "[N]"
          }
        ],
        "output-files": [
          {
            "id": "root_warp",
            "name": "Root Warp",
            "path-template": "[OUTWARP]",
            "description": "The 2^N-th root of the input warp"
          }
        ]
      }
    },
    {
      "id": "jacobian",
      "name": "Compute Jacobian",
      "command-line-flag": "-jac",
      "value-key": "[JACOBIAN]",
      "optional": true,
      "description": "Compute the Jacobian determinant of the warp",
      "type": {
        "id": "jacobian",
        "command-line": "[INWARP] [OUTJAC]",
        "inputs": [
          {
            "id": "inwarp",
            "name": "Input Warp",
            "type": "File",
            "description": "The input warp",
            "value-key": "[INWARP]"
          },
          {
            "id": "outjac",
            "name": "Output Jacobian",
            "type": "String",
            "description": "The filename for the Jacobian determinant output",
            "value-key": "[OUTJAC]"
          }
        ],
        "output-files": [
          {
            "id": "jacobian_determinant",
            "name": "Jacobian Determinant",
            "path-template": "[OUTJAC]",
            "description": "The Jacobian determinant of the warp"
          }
        ]
      }
    },
    {
      "id": "metric_mode",
      "name": "Metric Computation Mode",
      "type": "Flag",
      "command-line-flag": "-metric",
      "optional": true,
      "description": "Compute metric between images",
      "value-key": "[METRIC_MODE]"
    },
    {
      "id": "defopt",
      "name": "Deformable Optimization Mode",
      "type": "Flag",
      "command-line-flag": "-defopt",
      "optional": true,
      "description": "Deformable optimization mode (experimental)",
      "value-key": "[DEFOPT]"
    },
    {
      "id": "weight",
      "name": "Weight",
      "type": "Number",
      "command-line-flag": "-w",
      "optional": true,
      "description": "Weight of the next -i pair",
      "value-key": "[WEIGHT]"
    },
    {
      "id": "metric",
      "name": "Metric",
      "command-line-flag": "-m",
      "value-key": "[METRIC]",
      "optional": true,
      "description": "Metric for the entire registration",
      "type": {
        "id": "metric",
        "command-line": "[METRIC_TYPE] [METRIC_PARAM]",
        "inputs": [
          {
            "id": "metric_type",
            "name": "Metric Type",
            "type": "String",
            "value-choices": ["SSD", "MI", "NMI", "NCC", "MAHAL"],
            "description": "Type of metric to use",
            "value-key": "[METRIC_TYPE]"
          },
          {
            "id": "metric_param",
            "name": "Metric Parameter",
            "type": "Number",
            "optional": true,
            "description": "Parameter for the metric (e.g., radius for NCC)",
            "value-key": "[METRIC_PARAM]"
          }
        ]
      }
    },
    {
      "id": "step_size",
      "name": "Step Size",
      "type": "String",
      "command-line-flag": "-e",
      "value-key": "[STEP_SIZE]",
      "optional": true,
      "description": "Step size for optimization (default = 1.0), may also be specified per level (e.g. 0.3x0.1)"
    },
    {
      "id": "iterations",
      "name": "Iterations",
      "type": "String",
      "value-key": "[ITERATIONS]",
      "command-line-flag": "-n",
      "optional": true,
      "description": "Number of iterations per level of multi-res"
    },
    {
      "id": "threads",
      "name": "Threads",
      "type": "Number",
      "value-key": "[THREADS]",
      "integer": true,
      "command-line-flag": "-threads",
      "optional": true,
      "description": "Number of allowed concurrent threads"
    },
    {
      "id": "fixed_mask",
      "name": "Fixed Image Mask",
      "type": "File",
      "value-key": "[FIXED_MASK]",
      "command-line-flag": "-gm",
      "optional": true,
      "description": "Fixed image mask (metric gradients computed only over the mask)"
    },
    {
      "id": "gm_trim",
      "name": "Generate Fixed Image Mask",
      "type": "Number",
      "command-line-flag": "-gm-trim",
      "optional": true,
      "description": "Generate the fixed image mask by trimming the extent of the fixed image by given radius",
      "value-key": "[GM_TRIM]"
    },
    {
      "id": "moving_mask",
      "name": "Moving Image Mask",
      "type": "File",
      "value-key": "[MOVING_MASK]",
      "command-line-flag": "-mm",
      "optional": true,
      "description": "Moving image mask (pixels outside are excluded from metric computation)"
    },
    {
      "id": "wncc_mask_dilate",
      "name": "Dilate WNCC Masks",
      "type": "Flag",
      "command-line-flag": "-wncc-mask-dilate",
      "optional": true,
      "description": "Specifies that fixed and moving masks should be dilated by the radius of the WNCC metric during registration",
      "value-key": "[WNCC_MASK_DILATE]"
    },
    {
      "id": "reference_image",
      "name": "Reference Image",
      "type": "File",
      "command-line-flag": "-ref",
      "optional": true,
      "description": "Use supplied image, rather than fixed image to define the reference space",
      "value-key": "[REFERENCE_IMAGE]"
    },
    {
      "id": "ref_pad",
      "name": "Reference Padding",
      "type": "Number",
      "command-line-flag": "-ref-pad",
      "optional": true,
      "description": "Define the reference space by padding the fixed image by radius",
      "value-key": "[REF_PAD]"
    },
    {
      "id": "background",
      "name": "Background Value",
      "type": "String",
      "command-line-flag": "-bg",
      "optional": true,
      "description": "Value to fill missing values when mapping fixed and moving images to reference space",
      "value-key": "[BACKGROUND]"
    },
    {
      "id": "input_transform",
      "name": "Input Transform",
      "type": "File",
      "command-line-flag": "-it",
      "value-key": "[IT]",
      "optional": true,
      "description": "Specify transforms (matrices, warps) that map moving image to reference space"
    },
    {
      "id": "zero_last_dimension",
      "name": "Zero Last Dimension",
      "type": "Flag",
      "command-line-flag": "-z",
      "optional": true,
      "description": "Sets sigmas and NCC radius to zero in the last dimension for 2D/3D registration",
      "value-key": "[ZERO_LAST_DIMENSION]"
    },
    {
      "id": "time_step_mode",
      "name": "Time Step Mode",
      "type": "String",
      "command-line-flag": "-tscale",
      "optional": true,
      "value-choices": ["CONST", "SCALE", "SCALEDOWN"],
      "description": "Time step behavior mode",
      "value-key": "[TIME_STEP_MODE]"
    },
    {
      "id": "smoothing",
      "name": "Smoothing",
      "type": "String",
      "command-line-flag": "-s",
      "optional": true,
      "description": "Smoothing for the greedy update step (e.g., '1.732vox 0.7071vox')",
      "value-key": "[SMOOTHING]"
    },
    {
      "id": "inverse_warp",
      "name": "Inverse Warp Output",
      "type": "File",
      "command-line-flag": "-oinv",
      "optional": true,
      "description": "Compute and write the inverse of the warp field",
      "value-key": "[INVERSE_WARP]"
    },
    {
      "id": "root_warp",
      "name": "Root Warp Output",
      "type": "File",
      "command-line-flag": "-oroot",
      "optional": true,
      "description": "Compute and write the (2^N-th) root of the warp field",
      "value-key": "[ROOT_WARP]"
    },
    {
      "id": "warp_precision",
      "name": "Warp Precision",
      "type": "Number",
      "command-line-flag": "-wp",
      "value-key": "[WARP_PRECISION]",
      "optional": true,
      "description": "Saved warp precision in voxels (default=0.1; 0 for no compression)"
    },
    {
      "id": "noise",
      "name": "Noise",
      "type": "Number",
      "command-line-flag": "-noise",
      "optional": true,
      "description": "Standard deviation of white noise added to moving/fixed images when using NCC metric",
      "value-key": "[NOISE]"
    },
    {
      "id": "exponent",
      "name": "Exponent",
      "type": "Number",
      "command-line-flag": "-exp",
      "optional": true,
      "description": "The exponent used for warp inversion, root computation, and in stationary velocity field mode",
      "value-key": "[EXPONENT]"
    },
    {
      "id": "svf_mode",
      "name": "Stationary Velocity Field Mode",
      "type": "Flag",
      "command-line-flag": "-sv",
      "value-key": "[SVF_MODE]",
      "optional": true,
      "description": "Perform registration using the stationary velocity model"
    },
    {
      "id": "svlb",
      "name": "Stationary Velocity Field Mode (SVLB)",
      "type": "Flag",
      "command-line-flag": "-svlb",
      "optional": true,
      "description": "Use more accurate but expensive update of v in stationary velocity field mode",
      "value-key": "[SVLB]"
    },
    {
      "id": "sv_incompr",
      "name": "Incompressibility Mode",
      "type": "Flag",
      "command-line-flag": "-sv-incompr",
      "optional": true,
      "description": "Incompressibility mode, implements Mansi et al. 2011 iLogDemons",
      "value-key": "[SV_INCOMPR]"
    },
    {
      "id": "initial_warp",
      "name": "Initial Warp",
      "type": "File",
      "command-line-flag": "-id",
      "value-key": "[INITIAL_WARP]",
      "optional": true,
      "description": "Specifies the initial warp to start iteration from"
    },
    {
      "id": "tjr",
      "name": "Tetrahedral Mesh Regularization",
      "command-line-flag": "-tjr",
      "value-key": "[TJR]",
      "optional": true,
      "description": "Apply a regularization penalty based on the Jacobian of a tetrahedral mesh",
      "type": {
        "id": "tjr",
        "command-line": "[MESH] [WEIGHT]",
        "inputs": [
          {
            "id": "mesh",
            "name": "Mesh",
            "type": "File",
            "description": "The tetrahedral mesh file",
            "value-key": "[MESH]"
          },
          {
            "id": "weight",
            "name": "Weight",
            "type": "Number",
            "description": "The weight of the penalty term",
            "value-key": "[WEIGHT]"
          }
        ]
      }
    },
    {
      "id": "wr",
      "name": "SVF Smoothness Regularization Weight",
      "type": "Number",
      "command-line-flag": "-wr",
      "optional": true,
      "description": "Weight of SVF smoothness regularization term (default: 1000)",
      "value-key": "[WR]"
    },
    {
      "id": "initial_affine",
      "name": "Initial Affine Transform",
      "type": "File",
      "command-line-flag": "-ia",
      "optional": true,
      "description": "Initial affine matrix for optimization",
      "value-key": "[INITIAL_AFFINE]"
    },
    {
      "id": "ia_identity",
      "name": "Nifti Header Affine initialization",
      "type": "Flag",
      "value-key": "[AFFINE_IDENTITY]",
      "command-line-flag": "-ia-identity",
      "optional": true,
      "description": "Initialize affine matrix based on NIFTI headers"
    },
    {
      "id": "ia_voxel_grid",
      "name": "Voxel Grid Affine Initialization",
      "type": "Flag",
      "command-line-flag": "-ia-voxel-grid",
      "optional": true,
      "description": "Initialize affine matrix so that voxels with corresponding indices align",
      "value-key": "[IA_VOXEL_GRID]"
    },
    {
      "id": "ia_image_centers",
      "name": "Image Centers Affine Initialization",
      "type": "Flag",
      "command-line-flag": "-ia-image-centers",
      "optional": true,
      "description": "Initialize affine matrix based on matching image centers",
      "value-key": "[IA_IMAGE_CENTERS]"
    },
    {
      "id": "ia_image_side",
      "name": "Image Side Affine Initialization",
      "type": "String",
      "command-line-flag": "-ia-image-side",
      "optional": true,
      "description": "Initialize affine matrix based on matching center of one image side",
      "value-key": "[IA_IMAGE_SIDE]"
    },
    {
      "id": "ia_moments",
      "name": "Moments Affine Initialization",
      "type": "Number",
      "integer": true,
      "command-line-flag": "-ia-moments",
      "optional": true,
      "value-choices": [1, 2],
      "description": "Initialize affine matrix based on matching moments of inertia",
      "value-key": "[IA_MOMENTS]"
    },
    {
      "id": "affine_dof",
      "name": "Affine Degrees of Freedom",
      "type": "Number",
      "value-key": "[AFFINE_DOF]",
      "integer": true,
      "command-line-flag": "-dof",
      "value-choices": [6, 7, 12],
      "optional": true,
      "description": "Degrees of freedom for affine registration. 6=rigid, 7=similarity, 12=affine"
    },
    {
      "id": "jitter",
      "name": "Jitter",
      "type": "Number",
      "command-line-flag": "-jitter",
      "optional": true,
      "description": "Jitter (in voxel units) applied to sample points (default: 0.5)",
      "value-key": "[JITTER]"
    },
    {
      "id": "search",
      "name": "Random Search",
      "command-line-flag": "-search",
      "value-key": "[SEARCH]",
      "optional": true,
      "description": "Random search over rigid transforms before starting optimization",
      "type": {
        "id": "search",
        "command-line": "[N] [ROT] [TRAN]",
        "inputs": [
          {
            "id": "n",
            "name": "Number of Iterations",
            "type": "Number",
            "integer": true,
            "description": "Number of iterations for random search",
            "value-key": "[N]"
          },
          {
            "id": "rot",
            "name": "Rotation",
            "type": "String",
            "description": "Standard deviation of random rotation angle (degrees) or 'any' or 'flip'",
            "value-key": "[ROT]"
          },
          {
            "id": "tran",
            "name": "Translation",
            "type": "Number",
            "description": "Standard deviation of random offset in physical units",
            "value-key": "[TRAN]"
          }
        ]
      }
    },
    {
      "id": "det",
      "name": "Force Determinant",
      "type": "Number",
      "integer": true,
      "command-line-flag": "-det",
      "optional": true,
      "value-choices": [-1, 1],
      "description": "Force the determinant of transform to be either 1 (no flip) or -1 (flip)",
      "value-key": "[DET]"
    },
    {
      "id": "cov_id",
      "name": "Assume Identity Covariance",
      "type": "Flag",
      "command-line-flag": "-cov-id",
      "optional": true,
      "description": "Assume identity covariance (match centers and do flips only, no rotation)",
      "value-key": "[COV_ID]"
    },
    {
      "id": "fixed_reslicing_image",
      "name": "Reslice Fixed Image",
      "type": "File",
      "value-key": "[RESLICE_INPUT_IMG]",
      "command-line-flag": "-rf",
      "optional": true,
      "description": "Fixed image for reslicing"
    },
    {
      "id": "reslice_moving_image",
      "name": "Reslice Moving Image",
      "command-line-flag": "-rm",
      "optional": true,
      "description": "Moving/output image pair for reslicing",
      "type": {
        "id": "reslice_moving_image",
        "command-line": "[MOVING] [OUTPUT]",
        "inputs": [
          {
            "id": "moving",
            "name": "Moving Image",
            "type": "File",
            "description": "The moving image to be resliced",
            "value-key": "[MOVING]"
          },
          {
            "id": "output",
            "name": "Output Image",
            "type": "String",
            "description": "The filename for the resliced output image",
            "value-key": "[OUTPUT]"
          }
        ],
        "output-files": [
          {
            "id": "resliced_image",
            "name": "Resliced Image",
            "path-template": "[OUTPUT]",
            "description": "The resliced output image"
          }
        ]
      },
      "value-key": "[RESLICE_MOVING_IMAGE]"
    },
    {
      "id": "reslice_surface",
      "name": "Reslice Surface",
      "command-line-flag": "-rs",
      "optional": true,
      "description": "Fixed/output surface pair (vertices are warped from fixed space to moving)",
      "type": {
        "id": "reslice_surface",
        "command-line": "[INMESH] [OUTMESH]",
        "inputs": [
          {
            "id": "inmesh",
            "name": "Input Mesh",
            "type": "File",
            "description": "The input mesh file",
            "value-key": "[INMESH]"
          },
          {
            "id": "outmesh",
            "name": "Output Mesh",
            "type": "String",
            "description": "The filename for the output warped mesh",
            "value-key": "[OUTMESH]"
          }
        ],
        "output-files": [
          {
            "id": "warped_mesh",
            "name": "Warped Mesh",
            "path-template": "[OUTMESH]",
            "description": "The warped output mesh"
          }
        ]
      },
      "value-key": "[RESLICE_SURFACE]"
    },
    {
      "id": "interpolation",
      "name": "Interpolation Mode",
      "type": "String",
      "command-line-flag": "-ri",
      "optional": true,
      "value-choices": ["NN", "LINEAR", "LABEL"],
      "description": "Interpolation for the next pair (NN, LINEAR*, LABEL sigma)",
      "value-key": "[INTERPOLATION]"
    },
    {
      "id": "reslice_background",
      "name": "Reslice Background",
      "type": "Number",
      "command-line-flag": "-rb",
      "optional": true,
      "description": "Background (i.e. outside) intensity for the next pair (default 0)",
      "value-key": "[RESLICE_BACKGROUND]"
    },
    {
      "id": "reslice_datatype",
      "name": "Reslice Data Type",
      "type": "String",
      "command-line-flag": "-rt",
      "optional": true,
      "value-choices": [
        "auto",
        "double",
        "float",
        "uint",
        "int",
        "ushort",
        "short",
        "uchar",
        "char"
      ],
      "description": "Data type for the next pair",
      "value-key": "[RESLICE_DATATYPE]"
    },
    {
      "id": "reslice_composite",
      "name": "Reslice Composite",
      "type": "File",
      "command-line-flag": "-rc",
      "optional": true,
      "description": "Write composed transforms to outwarp",
      "value-key": "[RESLICE_COMPOSITE]"
    },
    {
      "id": "reslice_jacobian",
      "name": "Reslice Jacobian",
      "type": "File",
      "command-line-flag": "-rj",
      "optional": true,
      "description": "Write Jacobian determinant image to outjacobian",
      "value-key": "[RESLICE_JACOBIAN]"
    },
    {
      "id": "reslice_simplex_jacobian",
      "name": "Reslice Simplex Jacobian",
      "command-line-flag": "-rsj",
      "optional": true,
      "description": "Compute Jacobian determinant for a simplex mesh in fixed space",
      "type": {
        "id": "reslice_simplex_jacobian",
        "command-line": "[INMESH] [OUTMESH]",
        "inputs": [
          {
            "id": "inmesh",
            "name": "Input Mesh",
            "type": "File",
            "description": "The input simplex mesh file",
            "value-key": "[INMESH]"
          },
          {
            "id": "outmesh",
            "name": "Output Mesh",
            "type": "String",
            "description": "The filename for the output mesh with Jacobian determinants",
            "value-key": "[OUTMESH]"
          }
        ],
        "output-files": [
          {
            "id": "jacobian_mesh",
            "name": "Jacobian Mesh",
            "path-template": "[OUTMESH]",
            "description": "The output mesh with computed Jacobian determinants"
          }
        ]
      },
      "value-key": "[RESLICE_SIMPLEX_JACOBIAN]"
    },
    {
      "id": "reslice_mask",
      "name": "Reslice Mask",
      "type": "File",
      "command-line-flag": "-rk",
      "optional": true,
      "description": "A binary mask for the fixed image; zero values will be overwritten with background",
      "value-key": "[RESLICE_MASK]"
    },
    {
      "id": "metric_gradient",
      "name": "Metric Gradient Output",
      "type": "File",
      "command-line-flag": "-og",
      "optional": true,
      "description": "Write the gradient of the metric to file",
      "value-key": "[METRIC_GRADIENT]"
    },
    {
      "id": "debug_deriv",
      "name": "Debug Derivatives",
      "type": "Flag",
      "command-line-flag": "-debug-deriv",
      "optional": true,
      "description": "Enable periodic checks of derivatives (debug)",
      "value-key": "[DEBUG_DERIV]"
    },
    {
      "id": "debug_deriv_eps",
      "name": "Debug Derivative Epsilon",
      "type": "Number",
      "command-line-flag": "-debug-deriv-eps",
      "optional": true,
      "description": "Epsilon for derivative debugging",
      "value-key": "[DEBUG_DERIV_EPS]"
    },
    {
      "id": "debug_aff_obj",
      "name": "Debug Affine Objective",
      "type": "Flag",
      "command-line-flag": "-debug-aff-obj",
      "optional": true,
      "description": "Plot affine objective in neighborhood of -ia matrix",
      "value-key": "[DEBUG_AFF_OBJ]"
    },
    {
      "id": "dump_pyramid",
      "name": "Dump Pyramid",
      "type": "Flag",
      "command-line-flag": "-dump-pyramid",
      "optional": true,
      "description": "Dump the image pyramid at the start of the registration",
      "value-key": "[DUMP_PYRAMID]"
    },
    {
      "id": "dump_moving",
      "name": "Dump Moving",
      "type": "Flag",
      "command-line-flag": "-dump-moving",
      "optional": true,
      "description": "Dump moving image at each iter",
      "value-key": "[DUMP_MOVING]"
    },
    {
      "id": "dump_frequency",
      "name": "Dump Frequency",
      "type": "Number",
      "command-line-flag": "-dump-freq",
      "optional": true,
      "description": "Dump frequency",
      "value-key": "[DUMP_FREQUENCY]"
    },
    {
      "id": "dump_prefix",
      "name": "Dump Prefix",
      "type": "String",
      "command-line-flag": "-dump-prefix",
      "optional": true,
      "description": "Prefix for dump files (may be a path)",
      "value-key": "[DUMP_PREFIX]"
    },
    {
      "id": "powell",
      "name": "Use Powell's Method",
      "type": "Flag",
      "command-line-flag": "-powell",
      "optional": true,
      "description": "Use Powell's method instead of LGBFS",
      "value-key": "[POWELL]"
    },
    {
      "id": "float",
      "name": "Use Single Precision",
      "type": "Flag",
      "command-line-flag": "-float",
      "optional": true,
      "description": "Use single precision floating point (off by default)",
      "value-key": "[FLOAT]"
    },
    {
      "id": "version",
      "name": "Version",
      "type": "Flag",
      "command-line-flag": "-version",
      "optional": true,
      "description": "Print version info",
      "value-key": "[VERSION]"
    },
    {
      "id": "verbosity",
      "name": "Verbosity",
      "type": "Number",
      "value-key": "[VERBOSE]",
      "integer": true,
      "command-line-flag": "-V",
      "optional": true,
      "value-choices": [0, 1, 2],
      "description": "Verbosity level (0: none, 1: default, 2: verbose)"
    }
  ],
  "output-files": [
    {
      "id": "output_file",
      "name": "Output File",
      "path-template": "[OUTPUT]",
      "optional": true,
      "description": "Output file from affine or deformable registration"
    },
    {
      "id": "reslice_output_file",
      "name": "Resliced Output Image",
      "path-template": "[RESLICE_OUTPUT_IMAGE]",
      "optional": true,
      "description": "Resliced output image"
    }
  ]
}
