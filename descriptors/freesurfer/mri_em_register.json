{
  "tool-version": "7.4.1",
  "name": "mri_em_register",
  "author": "FreeSurfer Developers",
  "description": "This program creates a transform in lta format",
  "command-line": "mri_em_register [INPUT_VOLUME] [TEMPLATE_GCA] [OUTPUT_TRANSFORM] [DISTANCE] [NOMAP] [FLASH] [MASK] [SKULL] [UNS] [DIAG] [DEBUG_VOXEL] [DEBUG_LABEL] [TR] [TE] [ALPHA] [EXAMPLE] [SAMPLES] [FSAMPLES] [NSAMPLES] [CONTRAST] [FLASH_PARMS] [TRANSONLY] [WRITE_MEAN] [PRIOR] [SPACING] [SCALES] [NOVAR] [DT] [TOL] [CENTER] [NOSCALE] [NOISCALE] [NUM_TRANSFORMS] [AREA] [NLAREA] [LEVELS] [INTENSITY] [REDUCE] [N_SAMPLES] [NORM] [TRANS] [STEPS] [LONG_REG] [CPFILE] [TRANSLATION_VECTOR] [ROTATION_VECTOR] [XFORM] [BLUR] [DIAGNO] [S] [MAX_ANGLE] [NITERS] [WRITE_ITERS] [CTL_POINT_PCT] [MOMENTUM] [THREADS]",
  "schema-version": "0.5",
  "inputs": [
    {
      "description": "Input brain volume",
      "value-key": "[INPUT_VOLUME]",
      "type": "File",
      "optional": false,
      "id": "input_volume",
      "name": "Input Volume"
    },
    {
      "description": "Template GCA file",
      "value-key": "[TEMPLATE_GCA]",
      "type": "File",
      "optional": false,
      "id": "template_gca",
      "name": "Template GCA"
    },
    {
      "description": "Output transform name",
      "value-key": "[OUTPUT_TRANSFORM]",
      "type": "String",
      "optional": false,
      "id": "output_transform",
      "name": "Output Transform"
    },
    {
      "command-line-flag": "-dist",
      "description": "Distance",
      "value-key": "[DISTANCE]",
      "type": "Number",
      "optional": true,
      "id": "distance",
      "name": "Distance"
    },
    {
      "command-line-flag": "-nomap",
      "description": "No map",
      "value-key": "[NOMAP]",
      "type": "Flag",
      "optional": true,
      "id": "nomap",
      "name": "NoMap Flag"
    },
    {
      "command-line-flag": "-flash",
      "description": "Use FLASH forward model to predict intensity values",
      "value-key": "[FLASH]",
      "type": "Flag",
      "optional": true,
      "id": "flash",
      "name": "Flash Flag"
    },
    {
      "command-line-flag": "-mask",
      "description": "Use volname as a mask",
      "value-key": "[MASK]",
      "type": "File",
      "optional": true,
      "id": "mask",
      "name": "Mask Volume"
    },
    {
      "command-line-flag": "-skull",
      "description": "Align to atlas containing skull (uns=5)",
      "value-key": "[SKULL]",
      "type": "Flag",
      "optional": true,
      "id": "skull",
      "name": "Skull Flag"
    },
    {
      "command-line-flag": "-uns",
      "description": "Align to atlas containing skull setting unknown_nbr_spacing = nbrspacing",
      "value-key": "[UNS]",
      "type": "Number",
      "optional": true,
      "id": "uns",
      "name": "Unknown Neighbor Spacing"
    },
    {
      "command-line-flag": "-diag",
      "description": "Open diagfile for writing",
      "value-key": "[DIAG]",
      "type": "String",
      "optional": true,
      "id": "diag",
      "name": "Diag File"
    },
    {
      "command-line-flag": "-debug_voxel",
      "description": "Debug voxel (x, y, z)",
      "value-key": "[DEBUG_VOXEL]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "min-list-entries": 3,
      "optional": true,
      "id": "debug_voxel",
      "name": "Debug Voxel"
    },
    {
      "command-line-flag": "-debug_label",
      "description": "Debug label (label)",
      "value-key": "[DEBUG_LABEL]",
      "type": "Number",
      "optional": true,
      "id": "debug_label",
      "name": "Debug Label"
    },
    {
      "command-line-flag": "-tr",
      "description": "Use TR msec",
      "value-key": "[TR]",
      "type": "Number",
      "optional": true,
      "id": "tr",
      "name": "TR"
    },
    {
      "command-line-flag": "-te",
      "description": "Use TE msec",
      "value-key": "[TE]",
      "type": "Number",
      "optional": true,
      "id": "te",
      "name": "TE"
    },
    {
      "command-line-flag": "-alpha",
      "description": "Use alpha degrees",
      "value-key": "[ALPHA]",
      "type": "Number",
      "optional": true,
      "id": "alpha",
      "name": "Alpha"
    },
    {
      "command-line-flag": "-example",
      "description": "Use T1 and seg as example T1 and segmentations respectively",
      "value-key": "[EXAMPLE]",
      "type": "File",
      "list": true,
      "max-list-entries": 2,
      "min-list-entries": 2,
      "optional": true,
      "id": "example",
      "name": "Example T1 and Seg"
    },
    {
      "command-line-flag": "-samples",
      "description": "Write control points to fname",
      "value-key": "[SAMPLES]",
      "type": "String",
      "optional": true,
      "id": "samples",
      "name": "Samples File"
    },
    {
      "command-line-flag": "-fsamples",
      "description": "Write transformed control points to fname",
      "value-key": "[FSAMPLES]",
      "type": "String",
      "optional": true,
      "id": "fsamples",
      "name": "Files Samples"
    },
    {
      "command-line-flag": "-nsamples",
      "description": "Write transformed normalization control points to fname",
      "value-key": "[NSAMPLES]",
      "type": "String",
      "optional": true,
      "id": "nsamples",
      "name": "Normalized Samples"
    },
    {
      "command-line-flag": "-contrast",
      "description": "Use contrast to find labels",
      "value-key": "[CONTRAST]",
      "type": "Flag",
      "optional": true,
      "id": "contrast",
      "name": "Contrast Flag"
    },
    {
      "command-line-flag": "-flash_parms",
      "description": "Use FLASH forward model and tissue parms in parameterfile to predict intensity values",
      "value-key": "[FLASH_PARMS]",
      "type": "File",
      "optional": true,
      "id": "flash_parms",
      "name": "Flash Parameters"
    },
    {
      "command-line-flag": "-transonly",
      "description": "Only compute translation parameters",
      "value-key": "[TRANSONLY]",
      "type": "Flag",
      "optional": true,
      "id": "transonly",
      "name": "Translate Only Flag"
    },
    {
      "command-line-flag": "-write_mean",
      "description": "Write GCA means to fname",
      "value-key": "[WRITE_MEAN]",
      "type": "String",
      "optional": true,
      "id": "write_mean",
      "name": "Write Mean"
    },
    {
      "command-line-flag": "-prior",
      "description": "Use prior threshold min_prior",
      "value-key": "[PRIOR]",
      "type": "Number",
      "optional": true,
      "id": "prior",
      "name": "Prior Threshold"
    },
    {
      "command-line-flag": "-spacing",
      "description": "Use max GCA spacing",
      "value-key": "[SPACING]",
      "type": "Number",
      "optional": true,
      "id": "spacing",
      "name": "Spacing"
    },
    {
      "command-line-flag": "-scales",
      "description": "Find optimal linear transform over int scales",
      "value-key": "[SCALES]",
      "type": "Number",
      "optional": true,
      "id": "scales",
      "name": "Scales"
    },
    {
      "command-line-flag": "-novar",
      "description": "Do not use variance estimates",
      "value-key": "[NOVAR]",
      "type": "Flag",
      "optional": true,
      "id": "novar",
      "name": "No Variance Estimates Flag"
    },
    {
      "command-line-flag": "-dt",
      "description": "DT parameter",
      "value-key": "[DT]",
      "type": "Number",
      "optional": true,
      "id": "dt",
      "name": "DT Parameter"
    },
    {
      "command-line-flag": "-tol",
      "description": "Tolerance",
      "value-key": "[TOL]",
      "type": "Number",
      "optional": true,
      "id": "tol",
      "name": "Tolerance"
    },
    {
      "command-line-flag": "-center",
      "description": "Use GCA centroid as origin of transform",
      "value-key": "[CENTER]",
      "type": "Flag",
      "optional": true,
      "id": "center",
      "name": "Center Flag"
    },
    {
      "command-line-flag": "-noscale",
      "description": "Disable scaling",
      "value-key": "[NOSCALE]",
      "type": "Flag",
      "optional": true,
      "id": "noscale",
      "name": "No Scaling Flag"
    },
    {
      "command-line-flag": "-noiscale",
      "description": "Disable intensity scaling",
      "value-key": "[NOISCALE]",
      "type": "Flag",
      "optional": true,
      "id": "noiscale",
      "name": "No Intensity Scaling Flag"
    },
    {
      "command-line-flag": "-num",
      "description": "Find a total of num_xforms linear transforms",
      "value-key": "[NUM_TRANSFORMS]",
      "type": "Number",
      "optional": true,
      "id": "num_transforms",
      "name": "Number of Transforms"
    },
    {
      "command-line-flag": "-area",
      "description": "Area",
      "value-key": "[AREA]",
      "type": "Number",
      "optional": true,
      "id": "area",
      "name": "Area"
    },
    {
      "command-line-flag": "-nlarea",
      "description": "Non-linear area",
      "value-key": "[NLAREA]",
      "type": "Number",
      "optional": true,
      "id": "nlarea",
      "name": "Non-linear Area"
    },
    {
      "command-line-flag": "-levels",
      "description": "Levels",
      "value-key": "[LEVELS]",
      "type": "Number",
      "optional": true,
      "id": "levels",
      "name": "Levels"
    },
    {
      "command-line-flag": "-intensity",
      "description": "Intensity",
      "value-key": "[INTENSITY]",
      "type": "Number",
      "optional": true,
      "id": "intensity",
      "name": "Intensity"
    },
    {
      "command-line-flag": "-reduce",
      "description": "Reduce input images nreductions times before aligning",
      "value-key": "[REDUCE]",
      "type": "Number",
      "optional": true,
      "id": "reduce",
      "name": "Reduce Input Images"
    },
    {
      "command-line-flag": "-nsamples",
      "description": "Using n samples of GCA",
      "value-key": "[N_SAMPLES]",
      "type": "Number",
      "optional": true,
      "id": "n_samples",
      "name": "Number of GCA Samples"
    },
    {
      "command-line-flag": "-norm",
      "description": "Normalize intensity and write to fname",
      "value-key": "[NORM]",
      "type": "String",
      "optional": true,
      "id": "norm",
      "name": "Normalize and Write"
    },
    {
      "command-line-flag": "-trans",
      "description": "Setting max translation search range to be max_trans",
      "value-key": "[TRANS]",
      "type": "Number",
      "optional": true,
      "id": "trans",
      "name": "Max Translation Search Range"
    },
    {
      "command-line-flag": "-steps",
      "description": "Taking max_angles angular steps",
      "value-key": "[STEPS]",
      "type": "Number",
      "optional": true,
      "id": "steps",
      "name": "Max Angular Steps"
    },
    {
      "command-line-flag": "-l",
      "description": "Longitudinal: read previously computed atlas xform and apply registration long_reg",
      "value-key": "[LONG_REG]",
      "type": "String",
      "optional": true,
      "id": "long_reg",
      "name": "Longitudinal Registration"
    },
    {
      "command-line-flag": "-f",
      "description": "Read manually defined control points from cpfile",
      "value-key": "[CPFILE]",
      "type": "File",
      "optional": true,
      "id": "cpfile",
      "name": "Control Points File"
    },
    {
      "command-line-flag": "-d",
      "description": "Translation vector (tx, ty, tz)",
      "value-key": "[TRANSLATION_VECTOR]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "min-list-entries": 3,
      "optional": true,
      "id": "translation_vector",
      "name": "Translation Vector"
    },
    {
      "command-line-flag": "-r",
      "description": "Rotation vector (rx, ry, rz)",
      "value-key": "[ROTATION_VECTOR]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "min-list-entries": 3,
      "optional": true,
      "id": "rotation_vector",
      "name": "Rotation Vector"
    },
    {
      "command-line-flag": "-t",
      "description": "Using previously computed transform xform",
      "value-key": "[XFORM]",
      "type": "String",
      "optional": true,
      "id": "xform",
      "name": "Computed Transform"
    },
    {
      "command-line-flag": "-b",
      "description": "Blurring input image with sigma=blur_sigma",
      "value-key": "[BLUR]",
      "type": "Number",
      "optional": true,
      "id": "blur",
      "name": "Blurring Sigma"
    },
    {
      "command-line-flag": "-v",
      "description": "Diago flag (unspecified function)",
      "value-key": "[DIAGNO]",
      "type": "Flag",
      "optional": true,
      "id": "diagno",
      "name": "Diago Flag"
    },
    {
      "command-line-flag": "-s",
      "description": "Max angles",
      "value-key": "[S]",
      "type": "Number",
      "optional": true,
      "id": "s",
      "name": "Max Angles"
    },
    {
      "command-line-flag": "-max_angle",
      "description": "Max angle for rotational search in radians (def=15 deg)",
      "value-key": "[MAX_ANGLE]",
      "type": "Number",
      "optional": true,
      "id": "max_angle",
      "name": "Max Angle"
    },
    {
      "command-line-flag": "-n",
      "description": "Niterations = niters",
      "value-key": "[NITERS]",
      "type": "Number",
      "optional": true,
      "id": "niters",
      "name": "Number of Iterations"
    },
    {
      "command-line-flag": "-w",
      "description": "Write iterations = write_iters",
      "value-key": "[WRITE_ITERS]",
      "type": "Number",
      "optional": true,
      "id": "write_iters",
      "name": "Write Iterations"
    },
    {
      "command-line-flag": "-p",
      "description": "Use top pct percent wm points as control points",
      "value-key": "[CTL_POINT_PCT]",
      "type": "Number",
      "optional": true,
      "id": "ctl_point_pct",
      "name": "Control Point Percentage"
    },
    {
      "command-line-flag": "-m",
      "description": "Set momentum",
      "value-key": "[MOMENTUM]",
      "type": "Number",
      "optional": true,
      "id": "momentum",
      "name": "Momentum"
    },
    {
      "command-line-flag": "-threads",
      "description": "Number of threads (nompthreads)",
      "value-key": "[THREADS]",
      "type": "Number",
      "optional": true,
      "id": "threads",
      "name": "Number of Threads"
    }
  ],
  "output-files": [
    {
      "path-template": "[OUTPUT_TRANSFORM].lta",
      "description": "Transform in LTA format",
      "optional": false,
      "id": "output_transform_file",
      "name": "Output Transform File"
    }
  ],
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "url": "https://github.com/freesurfer/freesurfer"
}
