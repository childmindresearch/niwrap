{
  "name": "ApplyVolTransform",
  "command-line": "mri_vol2vol [FS_TARGET] [FSL_REG_FILE] [INTERP] [INVERSE] [INVERT_MORPH] [LTA_FILE] [LTA_INV_FILE] [M3Z_FILE] [MNI_152_REG] [NO_DEF_M3Z_PATH] [NO_RESAMPLE] [REG_FILE] [REG_HEADER] [SOURCE_FILE] [SUBJECT] [SUBJECTS_DIR] [TAL] [TAL_RESOLUTION] [TARGET_FILE] [TRANSFORMED_FILE] [XFM_REG_FILE]",
  "author": "Members of the Laboratories for Computational Neuroimaging (LCN) at the Athinoula A. Martinos Center for Biomedical Imaging",
  "description": "Resamples a volume into another field-of-view using varous types of matrices (FreeSurfer, FSL, SPM, and MNI).",
  "url": "https://surfer.nmr.mgh.harvard.edu/fswiki/mri_vol2vol",
  "inputs": [
    {
      "id": "fs_target",
      "name": "Fs target",
      "type": "Flag",
      "value-key": "[FS_TARGET]",
      "command-line-flag": "--fstarg",
      "description": "Use orig.mgz from subject in regfile as target.",
      "optional": true,
      "requires-inputs": ["reg_file"]
    },
    {
      "id": "fsl_reg_file",
      "name": "Fsl reg file",
      "type": "File",
      "value-key": "[FSL_REG_FILE]",
      "command-line-flag": "--fsl",
      "description": "Fslras-to-fslras matrix (fsl format).",
      "optional": true
    },
    {
      "id": "interp",
      "name": "Interp",
      "type": "String",
      "value-key": "[INTERP]",
      "command-line-flag": "--interp",
      "description": "'trilin' or 'nearest' or 'cubic'. Interpolation method (<trilin> or nearest).",
      "optional": true,
      "value-choices": ["trilin", "nearest", "cubic"]
    },
    {
      "id": "inverse",
      "name": "Inverse",
      "type": "Flag",
      "value-key": "[INVERSE]",
      "command-line-flag": "--inv",
      "description": "Sample from target to source.",
      "optional": true
    },
    {
      "id": "invert_morph",
      "name": "Invert morph",
      "type": "Flag",
      "value-key": "[INVERT_MORPH]",
      "command-line-flag": "--inv-morph",
      "description": "Compute and use the inverse of the non-linear morph to resample the input volume. to be used by --m3z.",
      "optional": true,
      "requires-inputs": ["m3z_file"]
    },
    {
      "id": "lta_file",
      "name": "Lta file",
      "type": "File",
      "value-key": "[LTA_FILE]",
      "command-line-flag": "--lta",
      "description": "Linear transform array file.",
      "optional": true
    },
    {
      "id": "lta_inv_file",
      "name": "Lta inv file",
      "type": "File",
      "value-key": "[LTA_INV_FILE]",
      "command-line-flag": "--lta-inv",
      "description": "Lta, invert.",
      "optional": true
    },
    {
      "id": "m3z_file",
      "name": "M3z file",
      "type": "File",
      "value-key": "[M3Z_FILE]",
      "command-line-flag": "--m3z",
      "description": "This is the morph to be applied to the volume. unless the morph is in mri/transforms (eg.: for talairach.m3z computed by reconall), you will need to specify the full path to this morph and use the --nodefm3zpath flag.",
      "optional": true
    },
    {
      "id": "mni_152_reg",
      "name": "Mni 152 reg",
      "type": "Flag",
      "value-key": "[MNI_152_REG]",
      "command-line-flag": "--regheader",
      "description": "Target mni152 space.",
      "optional": true
    },
    {
      "id": "no_def_m3z_path",
      "name": "No def m3z path",
      "type": "Flag",
      "value-key": "[NO_DEF_M3Z_PATH]",
      "command-line-flag": "--noDefM3zPath",
      "description": "To be used with the m3z flag. Instructs the code not to look for the non-linear m3z morph in the default location (subjects_dir/subj/mri/transforms), but instead just use the path indicated in --m3z.",
      "optional": true,
      "requires-inputs": ["m3z_file"]
    },
    {
      "id": "no_resample",
      "name": "No resample",
      "type": "Flag",
      "value-key": "[NO_RESAMPLE]",
      "command-line-flag": "--no-resample",
      "description": "Do not resample; just change vox2ras matrix.",
      "optional": true
    },
    {
      "id": "reg_file",
      "name": "Reg file",
      "type": "File",
      "value-key": "[REG_FILE]",
      "command-line-flag": "--reg",
      "description": "Tkras-to-tkras matrix   (tkregister2 format).",
      "optional": true
    },
    {
      "id": "reg_header",
      "name": "Reg header",
      "type": "Flag",
      "value-key": "[REG_HEADER]",
      "command-line-flag": "--regheader",
      "description": "Scannerras-to-scannerras matrix = identity.",
      "optional": true
    },
    {
      "id": "source_file",
      "name": "Source file",
      "type": "File",
      "value-key": "[SOURCE_FILE]",
      "command-line-flag": "--mov",
      "description": "Input volume you wish to transform.",
      "optional": true
    },
    {
      "id": "subject",
      "name": "Subject",
      "type": "String",
      "value-key": "[SUBJECT]",
      "command-line-flag": "--s",
      "description": "Set matrix = identity and use subject for any templates.",
      "optional": true
    },
    {
      "id": "subjects_dir",
      "name": "Subjects dir",
      "type": "File",
      "value-key": "[SUBJECTS_DIR]",
      "description": "file or string representing an existing directory. Subjects directory.",
      "optional": true
    },
    {
      "id": "tal",
      "name": "Tal",
      "type": "Flag",
      "value-key": "[TAL]",
      "command-line-flag": "--tal",
      "description": "Map to a sub fov of mni305 (with --reg only).",
      "optional": true
    },
    {
      "id": "tal_resolution",
      "name": "Tal resolution",
      "type": "Number",
      "value-key": "[TAL_RESOLUTION]",
      "command-line-flag": "--talres",
      "description": "Resolution to sample when using tal.",
      "optional": true
    },
    {
      "id": "target_file",
      "name": "Target file",
      "type": "File",
      "value-key": "[TARGET_FILE]",
      "command-line-flag": "--targ",
      "description": "Output template volume.",
      "optional": true
    },
    {
      "id": "transformed_file",
      "name": "Transformed file",
      "type": "File",
      "value-key": "[TRANSFORMED_FILE]",
      "command-line-flag": "--o",
      "description": "Output volume.",
      "optional": true
    },
    {
      "id": "xfm_reg_file",
      "name": "Xfm reg file",
      "type": "File",
      "value-key": "[XFM_REG_FILE]",
      "command-line-flag": "--xfm",
      "description": "Scannerras-to-scannerras matrix (mni format).",
      "optional": true
    }
  ],
  "output-files": [
    {
      "name": "Transformed file",
      "id": "transformed_file_outfile",
      "path-template": "[TRANSFORMED_FILE].nii.gz",
      "optional": true,
      "description": "Path to output file if used normally."
    }
  ],
  "groups": [
    {
      "id": "mutex_group",
      "name": "Mutex group",
      "members": ["tal", "fs_target", "target_file"],
      "mutually-exclusive": true
    },
    {
      "id": "mutex_group_2",
      "name": "Mutex group 2",
      "members": [
        "subject",
        "lta_file",
        "xfm_reg_file",
        "mni_152_reg",
        "reg_file",
        "lta_inv_file",
        "reg_header",
        "fsl_reg_file"
      ],
      "mutually-exclusive": true
    },
    {
      "id": "required_group1",
      "name": "Required group",
      "members": ["tal", "fs_target", "target_file"],
      "one-is-required": true
    },
    {
      "id": "required_group2",
      "name": "Required group 2",
      "members": [
        "subject",
        "lta_file",
        "xfm_reg_file",
        "mni_152_reg",
        "reg_file",
        "lta_inv_file",
        "reg_header",
        "fsl_reg_file"
      ],
      "one-is-required": true
    }
  ],
  "tool-version": "1.0.0",
  "schema-version": "0.5",
  "container-image": {
    "image": "container/image",
    "type": "docker"
  },
  "tags": {
    "domain": "neuroinformatics"
  }
}
