{
  "tool-version": "7.4.1",
  "name": "mri_segstats",
  "author": "FreeSurfer Developers",
  "descriptor-url": "https://surfer.nmr.mgh.harvard.edu/",
  "description": "Calculates measures and stats derived from brain segmentation data.",
  "command-line": "mri_segstats [SEGVOL] [ANNOT_SUBJECT] [ANNOT_HEMISPHERE] [ANNOT_PARCELLATION] [SLABEL_SUBJECT] [SLABEL_HEMISPHERE] [SLABEL_LABEL] [OUTPUT_FILE] [PARTIAL_VOL_COMP] [INPUT_VOLUME] [SEG_ERODE] [FRAME] [ROBUST] [SQUARE_INPUT] [SQRT_INPUT] [MULTIPLY_INPUT] [DIVIDE_INPUT] [SNR_COLUMN] [ABSOLUTE_VALUE] [ACCUMULATE_MEAN] [COLOR_TABLE] [DEFAULT_COLOR_TABLE] [GCA_COLOR_TABLE] [IDS] [EXCLUDE_IDS] [EXCLUDE_GM_WM] [SURF_WM_VOL] [SURF_CTX_VOL] [NO_GLOBAL_STATS] [EMPTY_SEGMENTS] [CTAB_OUTPUT] [MASK_VOLUME] [MASK_THRESHOLD] [MASK_SIGN] [MASK_FRAME] [INVERT_MASK] [MASK_ERODE] [BRAIN_VOL_SEG] [BRAIN_MASK_VOL] [SUBCORTICAL_GRAY] [TOTAL_GRAY] [INTRACRANIAL_VOLUME] [INTRACRANIAL_VOLUME_ONLY] [OLD_INTRACRANIAL_VOLUME_ONLY] [TALAIRACH_TRANSFORM] [XFM_TO_ETIV] [EULER_HOLE_COUNT] [AVG_WAVEFORM] [SUM_WAVEFORM] [AVG_WAVEFORM_VOL] [REMOVE_AVGWF_MEAN] [SPATIAL_FRAME_AVG] [VOXEL_CRS] [REPLACE_IDS] [REPLACE_IDS_FILE] [GTM_DEFAULT_SEG_MERGE] [GTM_DEFAULT_SEG_MERGE_CHOROID] [QA_STATS_FILE] [SUBJECTS_DIR] [RANDOM_SEED]",
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "schema-version": "0.5",
  "inputs": [
    {
      "command-line-flag": "--seg",
      "description": "Input segmentation volume. This volume's voxel values indicate a segmentation or class.",
      "value-key": "[SEGVOL]",
      "type": "File",
      "optional": false,
      "name": "Segmentation volume",
      "id": "segvol"
    },
    {
      "command-line-flag": "--annot",
      "description": "Create a segmentation from hemi.parc.annot. Subject is the name of the subject.",
      "value-key": "[ANNOT_SUBJECT]",
      "type": "String",
      "optional": true,
      "name": "Annotation subject",
      "id": "annot_subject"
    },
    {
      "value-key": "[ANNOT_HEMISPHERE]",
      "type": "String",
      "optional": true,
      "name": "Annotation hemisphere",
      "id": "annot_hemisphere"
    },
    {
      "value-key": "[ANNOT_PARCELLATION]",
      "type": "String",
      "optional": true,
      "name": "Annotation parcellation",
      "id": "annot_parcellation"
    },
    {
      "command-line-flag": "--slabel",
      "description": "Create a segmentation from the given surface label. The points in the label are given a value of 1; 0 for outside.",
      "value-key": "[SLABEL_SUBJECT]",
      "type": "String",
      "optional": true,
      "name": "Surface label subject",
      "id": "slabel_subject"
    },
    {
      "value-key": "[SLABEL_HEMISPHERE]",
      "type": "String",
      "optional": true,
      "name": "Surface label hemisphere",
      "id": "slabel_hemisphere"
    },
    {
      "value-key": "[SLABEL_LABEL]",
      "type": "File",
      "optional": true,
      "name": "Surface label file",
      "id": "slabel_label"
    },
    {
      "command-line-flag": "--o",
      "description": "ASCII file in which summary statistics are saved.",
      "value-key": "[OUTPUT_FILE]",
      "type": "String",
      "optional": false,
      "name": "Output file",
      "id": "output_file"
    },
    {
      "command-line-flag": "--pv",
      "description": "Use pvvol to compensate for partial voluming, resulting in more accurate volumes.",
      "value-key": "[PARTIAL_VOL_COMP]",
      "type": "File",
      "optional": true,
      "name": "Partial volume compensation volume",
      "id": "partial_vol_comp"
    },
    {
      "command-line-flag": "--i",
      "description": "Input volume from which to compute more statistics.",
      "value-key": "[INPUT_VOLUME]",
      "type": "File",
      "optional": true,
      "name": "Input volume",
      "id": "input_volume"
    },
    {
      "command-line-flag": "--seg-erode",
      "description": "Erode segmentation boundaries by Nerodes.",
      "value-key": "[SEG_ERODE]",
      "type": "Number",
      "optional": true,
      "name": "Erode segmentation",
      "id": "seg_erode"
    },
    {
      "command-line-flag": "--frame",
      "description": "Report statistics of the input volume at the specified 0-based frame number.",
      "value-key": "[FRAME]",
      "type": "Number",
      "optional": true,
      "name": "Frame number",
      "id": "frame"
    },
    {
      "command-line-flag": "--robust",
      "description": "Compute stats after excluding a percentage of high and low values.",
      "value-key": "[ROBUST]",
      "type": "Number",
      "optional": true,
      "name": "Robust percentage",
      "id": "robust"
    },
    {
      "command-line-flag": "--sqr",
      "description": "Compute the square of the input before computing stats.",
      "value-key": "[SQUARE_INPUT]",
      "type": "Flag",
      "optional": true,
      "name": "Square input",
      "id": "square_input"
    },
    {
      "command-line-flag": "--sqrt",
      "description": "Compute the square root of the input before computing stats.",
      "value-key": "[SQRT_INPUT]",
      "type": "Flag",
      "optional": true,
      "name": "Square root input",
      "id": "sqrt_input"
    },
    {
      "command-line-flag": "--mul",
      "description": "Multiply input by value.",
      "value-key": "[MULTIPLY_INPUT]",
      "type": "Number",
      "optional": true,
      "name": "Multiply input",
      "id": "multiply_input"
    },
    {
      "command-line-flag": "--div",
      "description": "Divide input by value.",
      "value-key": "[DIVIDE_INPUT]",
      "type": "Number",
      "optional": true,
      "name": "Divide input",
      "id": "divide_input"
    },
    {
      "command-line-flag": "--snr",
      "description": "Save mean/std as extra column in output table.",
      "value-key": "[SNR_COLUMN]",
      "type": "Flag",
      "optional": true,
      "name": "Save SNR column",
      "id": "snr_column"
    },
    {
      "command-line-flag": "--abs",
      "description": "Compute absolute value of input before spatial average.",
      "value-key": "[ABSOLUTE_VALUE]",
      "type": "Flag",
      "optional": true,
      "name": "Absolute value",
      "id": "absolute_value"
    },
    {
      "command-line-flag": "--accumulate",
      "description": "Save mean*nvoxels instead of mean.",
      "value-key": "[ACCUMULATE_MEAN]",
      "type": "Flag",
      "optional": true,
      "name": "Accumulate mean",
      "id": "accumulate_mean"
    },
    {
      "command-line-flag": "--ctab",
      "description": "FreeSurfer color table file to specify how each segmentation index is mapped to a segmentation name and color.",
      "value-key": "[COLOR_TABLE]",
      "type": "File",
      "optional": true,
      "name": "Color table file",
      "id": "color_table"
    },
    {
      "command-line-flag": "--ctab-default",
      "description": "Use default color table from FreeSurferColorLUT.txt.",
      "value-key": "[DEFAULT_COLOR_TABLE]",
      "type": "Flag",
      "optional": true,
      "name": "Use default color table",
      "id": "default_color_table"
    },
    {
      "command-line-flag": "--ctab-gca",
      "description": "Get color table from the given GCA file.",
      "value-key": "[GCA_COLOR_TABLE]",
      "type": "File",
      "optional": true,
      "name": "GCA color table file",
      "id": "gca_color_table"
    },
    {
      "command-line-flag": "--id",
      "description": "Specify numeric segmentation ids.",
      "value-key": "[IDS]",
      "type": "String",
      "optional": true,
      "name": "Segmentation IDs",
      "id": "ids"
    },
    {
      "command-line-flag": "--excludeid",
      "description": "Exclude the given segmentation id(s) from report.",
      "value-key": "[EXCLUDE_IDS]",
      "type": "String",
      "optional": true,
      "name": "Exclude IDs",
      "id": "exclude_ids"
    },
    {
      "command-line-flag": "--excl-ctxgmwm",
      "description": "Exclude cortical gray and white matter based on predefined IDs.",
      "value-key": "[EXCLUDE_GM_WM]",
      "type": "Flag",
      "optional": true,
      "name": "Exclude cortical GM and WM",
      "id": "exclude_gm_wm"
    },
    {
      "command-line-flag": "--surf-wm-vol",
      "description": "Compute cortical matter volume based on the white surface volume.",
      "value-key": "[SURF_WM_VOL]",
      "type": "Flag",
      "optional": true,
      "name": "Surface-based WM volume",
      "id": "surf_wm_vol"
    },
    {
      "command-line-flag": "--surf-ctx-vol",
      "description": "Compute cortical volumes from surface.",
      "value-key": "[SURF_CTX_VOL]",
      "type": "Flag",
      "optional": true,
      "name": "Surface-based cortex volume",
      "id": "surf_ctx_vol"
    },
    {
      "command-line-flag": "--no-global-stats",
      "description": "Turns off computation of global stats.",
      "value-key": "[NO_GLOBAL_STATS]",
      "type": "Flag",
      "optional": true,
      "name": "No global stats",
      "id": "no_global_stats"
    },
    {
      "command-line-flag": "--empty",
      "description": "Report on segmentations listed in the color table even if they are not found in the segmentation volume.",
      "value-key": "[EMPTY_SEGMENTS]",
      "type": "Flag",
      "optional": true,
      "name": "Report empty segmentations",
      "id": "empty_segments"
    },
    {
      "command-line-flag": "--ctab-out",
      "description": "Create an output color table with just the segmentations reported.",
      "value-key": "[CTAB_OUTPUT]",
      "type": "String",
      "optional": true,
      "name": "Output color table",
      "id": "ctab_output"
    },
    {
      "command-line-flag": "--mask",
      "description": "Exclude voxels that are not in the mask. Voxels to be excluded are assigned a segid of 0.",
      "value-key": "[MASK_VOLUME]",
      "type": "File",
      "optional": true,
      "name": "Mask volume",
      "id": "mask_volume"
    },
    {
      "command-line-flag": "--maskthresh",
      "description": "Exclude voxels that are below thresh, above -thresh, or between -thresh and +thresh.",
      "value-key": "[MASK_THRESHOLD]",
      "type": "Number",
      "optional": true,
      "name": "Mask threshold",
      "id": "mask_threshold"
    },
    {
      "command-line-flag": "--masksign",
      "description": "Specify sign for masking threshold. Choices are abs, pos, and neg.",
      "value-key": "[MASK_SIGN]",
      "type": "String",
      "optional": true,
      "name": "Mask sign",
      "id": "mask_sign"
    },
    {
      "command-line-flag": "--maskframe",
      "description": "Derive the mask volume from the specified 0-based frame.",
      "value-key": "[MASK_FRAME]",
      "type": "Number",
      "optional": true,
      "name": "Mask frame",
      "id": "mask_frame"
    },
    {
      "command-line-flag": "--maskinvert",
      "description": "After applying all the masking criteria, invert the mask.",
      "value-key": "[INVERT_MASK]",
      "type": "Flag",
      "optional": true,
      "name": "Invert mask",
      "id": "invert_mask"
    },
    {
      "command-line-flag": "--maskerode",
      "description": "Erode mask by specified number of iterations.",
      "value-key": "[MASK_ERODE]",
      "type": "Number",
      "optional": true,
      "name": "Erode mask",
      "id": "mask_erode"
    },
    {
      "command-line-flag": "--brain-vol-from-seg",
      "description": "Get volume of brain as the sum of the volumes of the segmentations that are in the brain.",
      "value-key": "[BRAIN_VOL_SEG]",
      "type": "Flag",
      "optional": true,
      "name": "Brain volume from segmentation",
      "id": "brain_vol_seg"
    },
    {
      "command-line-flag": "--brainmask",
      "description": "Load brain mask and compute brain volume from non-zero voxels.",
      "value-key": "[BRAIN_MASK_VOL]",
      "type": "File",
      "optional": true,
      "name": "Brain mask volume",
      "id": "brain_mask_vol"
    },
    {
      "command-line-flag": "--subcortgray",
      "description": "Compute volume of subcortical gray matter.",
      "value-key": "[SUBCORTICAL_GRAY]",
      "type": "Flag",
      "optional": true,
      "name": "Subcortical gray matter volume",
      "id": "subcortical_gray"
    },
    {
      "command-line-flag": "--totalgray",
      "description": "Compute volume of total gray matter.",
      "value-key": "[TOTAL_GRAY]",
      "type": "Flag",
      "optional": true,
      "name": "Total gray matter volume",
      "id": "total_gray"
    },
    {
      "command-line-flag": "--etiv",
      "description": "Compute intracranial volume from talairach.xfm.",
      "value-key": "[INTRACRANIAL_VOLUME]",
      "type": "Flag",
      "optional": true,
      "name": "Intracranial volume",
      "id": "intracranial_volume"
    },
    {
      "command-line-flag": "--etiv-only",
      "description": "Compute intracranial volume from talairach.xfm and exit.",
      "value-key": "[INTRACRANIAL_VOLUME_ONLY]",
      "type": "Flag",
      "optional": true,
      "name": "Intracranial volume only",
      "id": "intracranial_volume_only"
    },
    {
      "command-line-flag": "--old-etiv-only",
      "description": "Compute intracranial volume from talairach_with_skull.lta and exit.",
      "value-key": "[OLD_INTRACRANIAL_VOLUME_ONLY]",
      "type": "Flag",
      "optional": true,
      "name": "Old intracranial volume only",
      "id": "old_intracranial_volume_only"
    },
    {
      "command-line-flag": "--talxfm",
      "description": "Specify path to talairach.xfm file for eTIV.",
      "value-key": "[TALAIRACH_TRANSFORM]",
      "type": "File",
      "optional": true,
      "name": "Talairach transform file",
      "id": "talairach_transform"
    },
    {
      "command-line-flag": "--xfm2etiv",
      "description": "Convert xfm to eTIV and write to output file.",
      "value-key": "[XFM_TO_ETIV]",
      "type": "String",
      "optional": true,
      "name": "Transform to eTIV",
      "id": "xfm_to_etiv"
    },
    {
      "command-line-flag": "--euler",
      "description": "Write out number of defect holes based on the Euler number.",
      "value-key": "[EULER_HOLE_COUNT]",
      "type": "Flag",
      "optional": true,
      "name": "Euler hole count",
      "id": "euler_hole_count"
    },
    {
      "command-line-flag": "--avgwf",
      "description": "Compute the average waveform and save to text file.",
      "value-key": "[AVG_WAVEFORM]",
      "type": "String",
      "optional": true,
      "name": "Average waveform file",
      "id": "avg_waveform"
    },
    {
      "command-line-flag": "--sumwf",
      "description": "Compute the sum waveform and save to text file.",
      "value-key": "[SUM_WAVEFORM]",
      "type": "String",
      "optional": true,
      "name": "Sum waveform file",
      "id": "sum_waveform"
    },
    {
      "command-line-flag": "--avgwfvol",
      "description": "Compute average waveform and save to MRI volume.",
      "value-key": "[AVG_WAVEFORM_VOL]",
      "type": "String",
      "optional": true,
      "name": "Average waveform volume file",
      "id": "avg_waveform_vol"
    },
    {
      "command-line-flag": "--avgwf-remove-mean",
      "description": "Remove temporal mean from avgwf and avgwfvol.",
      "value-key": "[REMOVE_AVGWF_MEAN]",
      "type": "Flag",
      "optional": true,
      "name": "Remove avgwf temporal mean",
      "id": "remove_avgwf_mean"
    },
    {
      "command-line-flag": "--sfavg",
      "description": "Save mean across space and frame.",
      "value-key": "[SPATIAL_FRAME_AVG]",
      "type": "String",
      "optional": true,
      "name": "Spatial frame average file",
      "id": "spatial_frame_avg"
    },
    {
      "command-line-flag": "--vox",
      "description": "Replace segmentation with all 0s except at specified voxel.",
      "value-key": "[VOXEL_CRS]",
      "type": "String",
      "optional": true,
      "name": "Voxel CRS",
      "id": "voxel_crs"
    },
    {
      "command-line-flag": "--replace",
      "description": "Replace segmentation ID1 with ID2.",
      "value-key": "[REPLACE_IDS]",
      "type": "String",
      "optional": true,
      "name": "Replace segmentation IDs",
      "id": "replace_ids"
    },
    {
      "command-line-flag": "--replace-file",
      "description": "Replace segmentations based on pairs in file.",
      "value-key": "[REPLACE_IDS_FILE]",
      "type": "File",
      "optional": true,
      "name": "Replace IDs file",
      "id": "replace_ids_file"
    },
    {
      "command-line-flag": "--gtm-default-seg-merge",
      "description": "Replace segmentations based on GTM default.",
      "value-key": "[GTM_DEFAULT_SEG_MERGE]",
      "type": "Flag",
      "optional": true,
      "name": "GTM default segmentation merge",
      "id": "gtm_default_seg_merge"
    },
    {
      "command-line-flag": "--gtm-default-seg-merge-choroid",
      "description": "Replace segmentations based on GTM default excluding choroid.",
      "value-key": "[GTM_DEFAULT_SEG_MERGE_CHOROID]",
      "type": "Flag",
      "optional": true,
      "name": "GTM default segmentation merge choroid",
      "id": "gtm_default_seg_merge_choroid"
    },
    {
      "command-line-flag": "--qa-stats",
      "description": "Compute stats useful for quality control.",
      "value-key": "[QA_STATS_FILE]",
      "type": "String",
      "optional": true,
      "name": "QA statistics file",
      "id": "qa_stats_file"
    },
    {
      "command-line-flag": "--sd",
      "description": "Set SUBJECTS_DIR environment variable.",
      "value-key": "[SUBJECTS_DIR]",
      "type": "String",
      "optional": true,
      "name": "Subjects directory",
      "id": "subjects_dir"
    },
    {
      "command-line-flag": "--seed",
      "description": "Set random number generator seed value.",
      "value-key": "[RANDOM_SEED]",
      "type": "Number",
      "optional": true,
      "name": "Random seed",
      "id": "random_seed"
    }
  ],
  "output-files": [
    {
      "path-template": "[OUTPUT_FILE]",
      "description": "Output file for summary statistics.",
      "optional": true,
      "name": "Summary statistics output file",
      "id": "summary_output_file"
    },
    {
      "path-template": "[AVG_WF]",
      "description": "Average waveform output text file.",
      "optional": true,
      "name": "Average waveform text file",
      "id": "avg_waveform_output"
    },
    {
      "path-template": "[SUM_WF]",
      "description": "Sum waveform output text file.",
      "optional": true,
      "name": "Sum waveform text file",
      "id": "sum_waveform_output"
    },
    {
      "path-template": "[AVG_WF_VOL]",
      "description": "Average waveform volume output file.",
      "optional": true,
      "name": "Average waveform volume output",
      "id": "avg_waveform_vol_output"
    },
    {
      "path-template": "[SFAVG]",
      "description": "Spatial frame average output file.",
      "optional": true,
      "name": "Spatial frame average output",
      "id": "spatial_frame_avg_output"
    },
    {
      "path-template": "[CTAB_OUT]",
      "description": "Output color table with the reported segmentations.",
      "optional": true,
      "name": "Output color table file",
      "id": "ctab_output_file"
    }
  ],
  "url": "https://github.com/freesurfer/freesurfer"
}
