{
  "tool-version": "7.4.1",
  "name": "mri_vol2vol",
  "author": "FreeSurfer Developers",
  "descriptor-url": "https://github.com/freesurfer/freesurfer/blob/dev/mri_vol2vol.c",
  "description": "Resamples a volume into another field-of-view using various types of matrices (FreeSurfer, FSL, SPM, and MNI).",
  "command-line": "mri_vol2vol [MOVVOL] [TARGVOL] [OUTVOL] [DISPVOL] [DOWNSAMPLE] [REGISTER_DAT] [LTA] [LTA_INV] [FSL] [XFM] [INV] [TAL] [TALRES] [TALXFM] [M3Z] [INV_MORPH] [FSTARG] [CROP] [SLICE_CROP] [SLICE_REVERSE] [SLICE_BIAS] [INTERP] [FILL_AVERAGE] [FILL_CONSERVE] [FILL_UP] [MUL] [PRECISION] [KEEP_PRECISION] [KERNEL] [COPY_CTAB] [GCAM] [SPM_WARP] [MAP_POINT] [MAP_POINT_INV_LTA] [NO_RESAMPLE] [ROT] [TRANS] [SHEAR] [REG_FINAL] [SYNTH] [SEED] [SAVE_REG] [DEBUG] [VERSION]",
  "schema-version": "0.5",
  "inputs": [
    {
      "description": "Input volume (or output template with --inv)",
      "value-key": "[MOVVOL]",
      "type": "File",
      "optional": false,
      "id": "movvol",
      "name": "Moving volume"
    },
    {
      "description": "Output template (or input with --inv)",
      "value-key": "[TARGVOL]",
      "type": "File",
      "optional": false,
      "id": "targvol",
      "name": "Target volume"
    },
    {
      "description": "Output volume",
      "value-key": "[OUTVOL]",
      "type": "File",
      "optional": false,
      "id": "outvol",
      "name": "Output volume"
    },
    {
      "command-line-flag": "--disp",
      "description": "Displacement volume",
      "value-key": "[DISPVOL]",
      "type": "File",
      "optional": true,
      "id": "dispvol",
      "name": "Displacement volume"
    },
    {
      "command-line-flag": "--downsample",
      "description": "Downsample factor (e.g., 2) (do not include a targ or registration)",
      "value-key": "[DOWNSAMPLE]",
      "type": "Number",
      "list": true,
      "optional": true,
      "id": "downsample",
      "name": "Downsample factor"
    },
    {
      "command-line-flag": "--reg",
      "description": "tkRAS-to-tkRAS matrix (tkregister2 format)",
      "value-key": "[REGISTER_DAT]",
      "type": "File",
      "optional": true,
      "id": "register_dat",
      "name": "Registration matrix"
    },
    {
      "command-line-flag": "--lta",
      "description": "Linear Transform Array (usually only 1 transform)",
      "value-key": "[LTA]",
      "type": "File",
      "optional": true,
      "id": "lta",
      "name": "Linear Transform Array"
    },
    {
      "command-line-flag": "--lta-inv",
      "description": "LTA, invert (may not be the same as --lta --inv with --fstal)",
      "value-key": "[LTA_INV]",
      "type": "File",
      "optional": true,
      "id": "lta_inv",
      "name": "Inverted LTA"
    },
    {
      "command-line-flag": "--fsl",
      "description": "fslRAS-to-fslRAS matrix (FSL format)",
      "value-key": "[FSL]",
      "type": "File",
      "optional": true,
      "id": "fsl",
      "name": "FSL matrix"
    },
    {
      "command-line-flag": "--xfm",
      "description": "ScannerRAS-to-ScannerRAS matrix (MNI format)",
      "value-key": "[XFM]",
      "type": "File",
      "optional": true,
      "id": "xfm",
      "name": "XFM matrix"
    },
    {
      "command-line-flag": "--inv",
      "description": "Sample from targ to mov",
      "value-key": "[INV]",
      "type": "Flag",
      "optional": true,
      "id": "inv",
      "name": "Inverse transform flag"
    },
    {
      "command-line-flag": "--tal",
      "description": "Map to a sub FOV of MNI305 (with --reg only)",
      "value-key": "[TAL]",
      "type": "Flag",
      "optional": true,
      "id": "tal",
      "name": "Talairach mapping flag"
    },
    {
      "command-line-flag": "--talres",
      "description": "Set voxel size 1mm or 2mm (default is 1)",
      "value-key": "[TALRES]",
      "type": "Number",
      "optional": true,
      "id": "talres",
      "name": "Talairach resolution"
    },
    {
      "command-line-flag": "--talxfm",
      "description": "Path to the talairach transformation file. Default is talairach.xfm (looks in mri/transforms)",
      "value-key": "[TALXFM]",
      "type": "File",
      "optional": true,
      "id": "talxfm",
      "name": "Talairach transformation file"
    },
    {
      "command-line-flag": "--m3z",
      "description": "Non-linear morph encoded in the m3z format",
      "value-key": "[M3Z]",
      "type": "File",
      "optional": true,
      "id": "m3z",
      "name": "M3Z morph file"
    },
    {
      "command-line-flag": "--inv-morph",
      "description": "Compute and use the inverse of the m3z morph",
      "value-key": "[INV_MORPH]",
      "type": "Flag",
      "optional": true,
      "id": "inv_morph",
      "name": "Inverse morph flag"
    },
    {
      "command-line-flag": "--fstarg",
      "description": "Optionally use the specified volume from the subject in --reg as target. Default is orig.mgz",
      "value-key": "[FSTARG]",
      "type": "String",
      "optional": true,
      "id": "fstarg",
      "name": "FreeSurfer target volume"
    },
    {
      "command-line-flag": "--crop",
      "description": "Crop and change voxel size",
      "value-key": "[CROP]",
      "type": "Number",
      "optional": true,
      "id": "crop",
      "name": "Crop factor"
    },
    {
      "command-line-flag": "--slice-crop",
      "description": "Crop output slices to be within specified start and end indices",
      "value-key": "[SLICE_CROP]",
      "type": "Number",
      "list": true,
      "optional": true,
      "id": "slice_crop",
      "max-list-entries": 2,
      "name": "Slice crop range"
    },
    {
      "command-line-flag": "--slice-reverse",
      "description": "Reverse order of slices, update vox2ras",
      "value-key": "[SLICE_REVERSE]",
      "type": "Flag",
      "optional": true,
      "id": "slice_reverse",
      "name": "Slice reverse flag"
    },
    {
      "command-line-flag": "--slice-bias",
      "description": "Apply half-cosine bias field",
      "value-key": "[SLICE_BIAS]",
      "type": "Number",
      "optional": true,
      "id": "slice_bias",
      "name": "Slice bias factor"
    },
    {
      "command-line-flag": "--interp",
      "description": "Interpolation method: cubic, trilin, or nearest (default is trilin)",
      "value-key": "[INTERP]",
      "type": "String",
      "optional": true,
      "id": "interp",
      "name": "Interpolation type"
    },
    {
      "command-line-flag": "--fill-average",
      "description": "Compute mean of all source voxels in a given target voxel",
      "value-key": "[FILL_AVERAGE]",
      "type": "Flag",
      "optional": true,
      "id": "fill_average",
      "name": "Fill average flag"
    },
    {
      "command-line-flag": "--fill-conserve",
      "description": "Compute sum of all source voxels in a given target voxel",
      "value-key": "[FILL_CONSERVE]",
      "type": "Flag",
      "optional": true,
      "id": "fill_conserve",
      "name": "Fill conserve flag"
    },
    {
      "command-line-flag": "--fill-upsample",
      "description": "Source upsampling factor for --fill-{avg,cons} (default is 2)",
      "value-key": "[FILL_UP]",
      "type": "Number",
      "optional": true,
      "id": "fill_up",
      "name": "Fill upsample factor"
    },
    {
      "command-line-flag": "--mul",
      "description": "Multiply output by the specified value",
      "value-key": "[MUL]",
      "type": "Number",
      "optional": true,
      "id": "mul",
      "name": "Multiplication factor"
    },
    {
      "command-line-flag": "--precision",
      "description": "Output precision (default is float)",
      "value-key": "[PRECISION]",
      "type": "String",
      "optional": true,
      "id": "precision",
      "name": "Output precision level"
    },
    {
      "command-line-flag": "--keep-precision",
      "description": "Set output precision to that of the input",
      "value-key": "[KEEP_PRECISION]",
      "type": "Flag",
      "optional": true,
      "id": "keep_precision",
      "name": "Keep input precision flag"
    },
    {
      "command-line-flag": "--kernel",
      "description": "Save the trilinear interpolation kernel at each voxel instead of the interpolated image",
      "value-key": "[KERNEL]",
      "type": "Flag",
      "optional": true,
      "id": "kernel",
      "name": "Trilinear interpolation kernel flag"
    },
    {
      "command-line-flag": "--copy-ctab",
      "description": "Setenv FS_COPY_HEADER_CTAB to copy any ctab in the mov header",
      "value-key": "[COPY_CTAB]",
      "type": "Flag",
      "optional": true,
      "id": "copy_ctab",
      "name": "Copy ctab flag"
    },
    {
      "command-line-flag": "--gcam",
      "description": "GCAM warp procedure",
      "value-key": "[GCAM]",
      "type": "String",
      "optional": true,
      "id": "gcam",
      "name": "GCAM parameters"
    },
    {
      "command-line-flag": "--spm-warp",
      "description": "SPM warp procedure",
      "value-key": "[SPM_WARP]",
      "type": "String",
      "optional": true,
      "id": "spm_warp",
      "name": "SPM Warp parameters"
    },
    {
      "command-line-flag": "--map-point",
      "description": "Standalone option to map a point to another space",
      "value-key": "[MAP_POINT]",
      "type": "String",
      "optional": true,
      "id": "map_point",
      "name": "Map point parameters"
    },
    {
      "command-line-flag": "--map-point-inv-lta",
      "description": "Same as --map-point but inverts the LTA",
      "value-key": "[MAP_POINT_INV_LTA]",
      "type": "String",
      "optional": true,
      "id": "map_point_inv_lta",
      "name": "Inverted LTA map point parameters"
    },
    {
      "command-line-flag": "--no-resample",
      "description": "Do not resample, just change vox2ras matrix",
      "value-key": "[NO_RESAMPLE]",
      "type": "Flag",
      "optional": true,
      "id": "no_resample",
      "name": "No resampling flag"
    },
    {
      "command-line-flag": "--rot",
      "description": "Rotation angles (degrees) to apply to registration matrix",
      "value-key": "[ROT]",
      "type": "Number",
      "list": true,
      "optional": true,
      "id": "rot",
      "name": "Rotation angles",
      "min-list-entries": 3,
      "max-list-entries": 3
    },
    {
      "command-line-flag": "--trans",
      "description": "Translation (mm) to apply to registration matrix",
      "value-key": "[TRANS]",
      "type": "Number",
      "list": true,
      "optional": true,
      "id": "trans",
      "name": "Translation distances",
      "min-list-entries": 3,
      "max-list-entries": 3
    },
    {
      "command-line-flag": "--shear",
      "description": "Shearing factors. Sxy Sxz Syz with xz as in-plane",
      "value-key": "[SHEAR]",
      "type": "Number",
      "list": true,
      "optional": true,
      "id": "shear",
      "name": "Shearing factors",
      "min-list-entries": 3,
      "max-list-entries": 3
    },
    {
      "command-line-flag": "--reg-final",
      "description": "Final registration matrix after rotation and translation (but not inversion)",
      "value-key": "[REG_FINAL]",
      "type": "File",
      "optional": true,
      "id": "reg_final",
      "name": "Final registration matrix"
    },
    {
      "command-line-flag": "--synth",
      "description": "Replace input with white Gaussian noise",
      "value-key": "[SYNTH]",
      "type": "Flag",
      "optional": true,
      "id": "synth",
      "name": "Synthesize noise flag"
    },
    {
      "command-line-flag": "--seed",
      "description": "Seed for synth (default is to set from time of day)",
      "value-key": "[SEED]",
      "type": "Number",
      "optional": true,
      "id": "seed",
      "name": "Random seed"
    },
    {
      "command-line-flag": "--save-reg",
      "description": "Write out output volume registration matrix",
      "value-key": "[SAVE_REG]",
      "type": "Flag",
      "optional": true,
      "id": "save_reg",
      "name": "Save registration flag"
    },
    {
      "command-line-flag": "--debug",
      "description": "Turn on debugging output",
      "value-key": "[DEBUG]",
      "type": "Flag",
      "optional": true,
      "id": "debug",
      "name": "Debug flag"
    },
    {
      "command-line-flag": "--version",
      "description": "Print out version string and exit",
      "value-key": "[VERSION]",
      "type": "Flag",
      "optional": true,
      "id": "version",
      "name": "Version flag"
    }
  ],
  "output-files": [
    {
      "path-template": "[OUTVOL]",
      "description": "Resampled output volume.",
      "optional": false,
      "id": "output_volume",
      "name": "Output volume"
    }
  ],
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "url": "https://github.com/freesurfer/freesurfer"
}
