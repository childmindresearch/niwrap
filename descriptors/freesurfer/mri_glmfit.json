{
  "tool-version": "7.4.1",
  "name": "mri_glmfit",
  "author": "FreeSurfer Developers",
  "description": "Performs general linear model (GLM) analysis in the volume or the surface.",
  "command-line": "mri_glmfit [GLMDIR] [Y_INPUT] [TABLE_INPUT] [FSGD] [DESIGN_MATRIX] [CONTRAST_MATRIX] [OSGM_FLAG] [NO_CONTRASTS_OK_FLAG] [DTI_PARAMS] [DTI_MATRIX] [PVR] [SELFREG] [WLS] [YFFXVAR] [FFXDOF] [FFXDOFDAT] [WEIGHT] [WEIGHT_INV_FLAG] [WEIGHT_SQRT_FLAG] [FWHM] [VAR_FWHM] [NO_MASK_SMOOTH_FLAG] [NO_EST_FWHM_FLAG] [MASK] [LABEL] [NO_MASK_FLAG] [NO_CORTEX_FLAG] [MASK_INV_FLAG] [PRUNE_FLAG] [NO_PRUNE_FLAG] [LOGY_FLAG] [NO_LOGY_FLAG] [RM_SPATIAL_MEAN_FLAG] [YHAT_SAVE_FLAG] [ERES_SAVE_FLAG] [ERES_SCM_FLAG] [SAVE_FWHM_MAP_FLAG] [Y_OUT] [SURFACE] [SKEW_FLAG] [KURTOSIS_FLAG] [SIM_PARAMS] [SIM_SIGN] [UNIFORM_PARAMS] [PERMUTE_INPUT_FLAG] [PCA_FLAG] [TAR1_FLAG] [SAVE_YHAT_FLAG] [SAVE_COND_FLAG] [VOXDUMP] [SEED] [SYNTH_FLAG] [RESYNTHTEST_IT] [PROFILE_IT] [MRTM1_PARAMS] [MRTM2_PARAMS] [LOGAN_PARAMS] [BP_CLIP_NEG_FLAG] [BP_CLIP_MAX] [PERM_FORCE_FLAG] [DIAG_LEVEL] [DIAG_CLUSTER_FLAG] [DEBUG_FLAG] [CHECKOPTS_FLAG] [HELP_FLAG] [VERSION_FLAG] [NO_FIX_VERTEX_AREA_FLAG] [ALLOWSUBJREP_FLAG] [ALLOW_ZERO_DOF_FLAG] [ILLCOND_FLAG] [SIM_DONE_FILE] [NO_SIG_DOUBLE_FLAG]",
  "schema-version": "0.5",
  "inputs": [
    {
      "command-line-flag": "--glmdir",
      "description": "Directory where output will be saved.",
      "value-key": "[GLMDIR]",
      "type": "String",
      "optional": true,
      "id": "glmdir",
      "name": "GLM output directory"
    },
    {
      "command-line-flag": "--y",
      "description": "Path to input file where each frame is a separate input. Accepts volume or surface-based formats.",
      "value-key": "[Y_INPUT]",
      "type": "File",
      "optional": false,
      "id": "y_input",
      "name": "Input file"
    },
    {
      "command-line-flag": "--table",
      "description": "Use text table as input instead of --y. Table should be of form produced by asegstats2table or aparcstats2table.",
      "value-key": "[TABLE_INPUT]",
      "type": "File",
      "optional": true,
      "id": "table_input",
      "name": "Stats table"
    },
    {
      "command-line-flag": "--fsgd",
      "description": "Specify the global design matrix with a FreeSurfer Group Descriptor File (FSGDF).",
      "value-key": "[FSGD]",
      "type": "File",
      "optional": true,
      "id": "fsgd",
      "name": "FSGD descriptor file"
    },
    {
      "command-line-flag": "--X",
      "description": "Explicitly specify the design matrix. Can be in simple text or in matlab4 format.",
      "value-key": "[DESIGN_MATRIX]",
      "type": "File",
      "optional": true,
      "id": "design_matrix",
      "name": "Design matrix file"
    },
    {
      "command-line-flag": "--C",
      "description": "Specify one or more contrasts to test. File should be ASCII text with the contrast matrix.",
      "value-key": "[CONTRAST_MATRIX]",
      "type": "File",
      "list": true,
      "optional": true,
      "id": "contrast_matrix",
      "name": "Contrast matrix file"
    },
    {
      "command-line-flag": "--osgm",
      "description": "Construct X and C as a one-sample group mean.",
      "value-key": "[OSGM_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "osgm_flag",
      "name": "One-sample group mean"
    },
    {
      "command-line-flag": "--no-contrasts-ok",
      "description": "Do not fail if no contrasts are specified.",
      "value-key": "[NO_CONTRASTS_OK_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_contrasts_ok_flag",
      "name": "No contrasts OK flag"
    },
    {
      "command-line-flag": "--dti",
      "description": "Do DTI analysis using bvals and bvecs.",
      "value-key": "[DTI_PARAMS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "dti_params",
      "name": "DTI parameters"
    },
    {
      "command-line-flag": "--dti-X",
      "description": "Do DTI analysis using provided matrix.",
      "value-key": "[DTI_MATRIX]",
      "type": "File",
      "optional": true,
      "id": "dti_matrix",
      "name": "DTI design matrix"
    },
    {
      "command-line-flag": "--pvr",
      "description": "Per-voxel (or vertex) regressors.",
      "value-key": "[PVR]",
      "type": "File",
      "list": true,
      "optional": true,
      "id": "pvr",
      "name": "Per-voxel regressors"
    },
    {
      "command-line-flag": "--selfreg",
      "description": "Create a 'self-regressor' from the input data based on the waveform at index col row slice.",
      "value-key": "[SELFREG]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "selfreg",
      "min-list-entries": 3,
      "name": "Self-regressor coordinates"
    },
    {
      "command-line-flag": "--wls",
      "description": "Perform weighted least squares (WLS) random effects analysis instead of ordinary least squares (OLS) using yffxvar.",
      "value-key": "[WLS]",
      "type": "String",
      "optional": true,
      "id": "wls",
      "name": "Weighted least squares"
    },
    {
      "command-line-flag": "--yffxvar",
      "description": "For fixed effects analysis.",
      "value-key": "[YFFXVAR]",
      "type": "File",
      "optional": true,
      "id": "yffxvar",
      "name": "YFFX variance file"
    },
    {
      "command-line-flag": "--ffxdof",
      "description": "Degrees of Freedom (DOF) for fixed effects analysis.",
      "value-key": "[FFXDOF]",
      "type": "Number",
      "optional": true,
      "id": "ffxdof",
      "name": "Fixed effects DOF"
    },
    {
      "command-line-flag": "--ffxdofdat",
      "description": "Text file with DOF for fixed effects analysis.",
      "value-key": "[FFXDOFDAT]",
      "type": "File",
      "optional": true,
      "id": "ffxdofdat",
      "name": "Fixed effects DOF data"
    },
    {
      "command-line-flag": "--w",
      "description": "Perform weighted LMS using per-voxel weights from the weightfile.",
      "value-key": "[WEIGHT]",
      "type": "File",
      "optional": true,
      "id": "weight",
      "name": "Weight file"
    },
    {
      "command-line-flag": "--w-inv",
      "description": "Invert weights.",
      "value-key": "[WEIGHT_INV_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "weight_inv_flag",
      "name": "Invert weights flag"
    },
    {
      "command-line-flag": "--w-sqrt",
      "description": "Square root of (inverted) weights.",
      "value-key": "[WEIGHT_SQRT_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "weight_sqrt_flag",
      "name": "Square root weights flag"
    },
    {
      "command-line-flag": "--fwhm",
      "description": "Smooth input with a Gaussian kernel, specified in mm.",
      "value-key": "[FWHM]",
      "type": "Number",
      "optional": true,
      "id": "fwhm",
      "name": "Smoothing kernel FWHM"
    },
    {
      "command-line-flag": "--var-fwhm",
      "description": "Smooth residual variance map with a Gaussian kernel, specified in mm.",
      "value-key": "[VAR_FWHM]",
      "type": "Number",
      "optional": true,
      "id": "var_fwhm",
      "name": "Variance smoothing FWHM"
    },
    {
      "command-line-flag": "--no-mask-smooth",
      "description": "Do not mask when smoothing.",
      "value-key": "[NO_MASK_SMOOTH_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_mask_smooth_flag",
      "name": "Skip mask during smoothing"
    },
    {
      "command-line-flag": "--no-est-fwhm",
      "description": "Turn off FWHM output estimation.",
      "value-key": "[NO_EST_FWHM_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_est_fwhm_flag",
      "name": "No FWHM estimation"
    },
    {
      "command-line-flag": "--mask",
      "description": "Binary mask file for analysis.",
      "value-key": "[MASK]",
      "type": "File",
      "optional": true,
      "id": "mask",
      "name": "Mask file"
    },
    {
      "command-line-flag": "--label",
      "description": "Use label as mask for surface data.",
      "value-key": "[LABEL]",
      "type": "File",
      "optional": true,
      "id": "label",
      "name": "Label file"
    },
    {
      "command-line-flag": "--no-mask",
      "description": "Do NOT use a mask, same as --no-cortex.",
      "value-key": "[NO_MASK_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_mask_flag",
      "name": "No mask flag"
    },
    {
      "command-line-flag": "--no-cortex",
      "description": "Do NOT use subjects ?h.cortex.label as --label.",
      "value-key": "[NO_CORTEX_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_cortex_flag",
      "name": "No cortex label flag"
    },
    {
      "command-line-flag": "--mask-inv",
      "description": "Invert mask for analysis.",
      "value-key": "[MASK_INV_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "mask_inv_flag",
      "name": "Invert mask flag"
    },
    {
      "command-line-flag": "--prune",
      "description": "Remove voxels that do not have a non-zero value at each frame.",
      "value-key": "[PRUNE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "prune_flag",
      "name": "Prune zero-value voxels"
    },
    {
      "command-line-flag": "--no-prune",
      "description": "Do not prune zero-value voxels.",
      "value-key": "[NO_PRUNE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_prune_flag",
      "name": "Do not prune voxels"
    },
    {
      "command-line-flag": "--logy",
      "description": "Compute natural log of y prior to analysis.",
      "value-key": "[LOGY_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "logy_flag",
      "name": "Log transform y"
    },
    {
      "command-line-flag": "--no-logy",
      "description": "Do not compute natural log of y prior to analysis.",
      "value-key": "[NO_LOGY_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_logy_flag",
      "name": "No log transform of y"
    },
    {
      "command-line-flag": "--rm-spatial-mean",
      "description": "Subtract the (masked) mean from each frame.",
      "value-key": "[RM_SPATIAL_MEAN_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "rm_spatial_mean_flag",
      "name": "Remove spatial mean"
    },
    {
      "command-line-flag": "--yhat-save",
      "description": "Save signal estimate (yhat).",
      "value-key": "[YHAT_SAVE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "yhat_save_flag",
      "name": "Save signal estimate"
    },
    {
      "command-line-flag": "--eres-save",
      "description": "Save residual error (eres).",
      "value-key": "[ERES_SAVE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "eres_save_flag",
      "name": "Save residual error"
    },
    {
      "command-line-flag": "--eres-scm",
      "description": "Save residual error spatial correlation matrix (eres.scm).",
      "value-key": "[ERES_SCM_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "eres_scm_flag",
      "name": "Save residual SCM"
    },
    {
      "command-line-flag": "--save-fwhm-map",
      "description": "Save voxel-wise map of FWHM estimates.",
      "value-key": "[SAVE_FWHM_MAP_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "save_fwhm_map_flag",
      "name": "Save FWHM map"
    },
    {
      "command-line-flag": "--y-out",
      "description": "Save input after any pre-processing.",
      "value-key": "[Y_OUT]",
      "type": "File",
      "optional": true,
      "id": "y_out",
      "name": "Output pre-processed data file"
    },
    {
      "command-line-flag": "--surf",
      "description": "Specify that the input has a surface geometry from the hemisphere of the given FreeSurfer subject. Required for surface data operations.",
      "value-key": "[SURFACE]",
      "type": "String",
      "optional": true,
      "id": "surface",
      "name": "Surface specification"
    },
    {
      "command-line-flag": "--skew",
      "description": "Compute skew and p-value for skew.",
      "value-key": "[SKEW_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "skew_flag",
      "name": "Compute skewness"
    },
    {
      "command-line-flag": "--kurtosis",
      "description": "Compute kurtosis and p-value for kurtosis.",
      "value-key": "[KURTOSIS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "kurtosis_flag",
      "name": "Compute kurtosis"
    },
    {
      "command-line-flag": "--sim",
      "description": "Simulate data for statistical testing. Specify nulltype, number of simulations, threshold and csd basename.",
      "value-key": "[SIM_PARAMS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "sim_params",
      "name": "Simulation parameters"
    },
    {
      "command-line-flag": "--sim-sign",
      "description": "Specify sign for simulation: abs, pos, or neg.",
      "value-key": "[SIM_SIGN]",
      "type": "String",
      "optional": true,
      "id": "sim_sign",
      "name": "Simulation sign"
    },
    {
      "command-line-flag": "--uniform",
      "description": "Use uniform distribution for mc-full, specify min and max.",
      "value-key": "[UNIFORM_PARAMS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "uniform_params",
      "name": "Uniform distribution parameters"
    },
    {
      "command-line-flag": "--permute-input",
      "description": "Permute input for testing purposes (not related to simulation).",
      "value-key": "[PERMUTE_INPUT_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "permute_input_flag",
      "name": "Permute input flag"
    },
    {
      "command-line-flag": "--pca",
      "description": "Perform PCA/SVD analysis on the residual.",
      "value-key": "[PCA_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "pca_flag",
      "name": "Perform PCA"
    },
    {
      "command-line-flag": "--tar1",
      "description": "Compute and save temporal AR1 of residual.",
      "value-key": "[TAR1_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "tar1_flag",
      "name": "Compute temporal AR1"
    },
    {
      "command-line-flag": "--save-yhat",
      "description": "Flag to save the signal estimate.",
      "value-key": "[SAVE_YHAT_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "save_yhat_flag",
      "name": "Save signal estimate flag"
    },
    {
      "command-line-flag": "--save-cond",
      "description": "Flag to save design matrix condition at each voxel.",
      "value-key": "[SAVE_COND_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "save_cond_flag",
      "name": "Save condition number"
    },
    {
      "command-line-flag": "--voxdump",
      "description": "Save GLM data for a single voxel at the specified col, row, slice.",
      "value-key": "[VOXDUMP]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "optional": true,
      "id": "voxdump",
      "min-list-entries": 3,
      "name": "Voxel dump coordinates"
    },
    {
      "command-line-flag": "--seed",
      "description": "Use seed for random number generation.",
      "value-key": "[SEED]",
      "type": "Number",
      "optional": true,
      "id": "seed",
      "name": "Random seed"
    },
    {
      "command-line-flag": "--synth",
      "description": "Replace input data with Gaussian noise for testing.",
      "value-key": "[SYNTH_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "synth_flag",
      "name": "Synthesize Gaussian noise"
    },
    {
      "command-line-flag": "--resynthtest",
      "description": "Test GLM by resynthsis with the number of iterations specified.",
      "value-key": "[RESYNTHTEST_IT]",
      "type": "Number",
      "optional": true,
      "id": "resynthtest_it",
      "name": "Resynthesis test iterations"
    },
    {
      "command-line-flag": "--profile",
      "description": "Test speed with specified number of iterations.",
      "value-key": "[PROFILE_IT]",
      "type": "Number",
      "optional": true,
      "id": "profile_it",
      "name": "Profile iterations"
    },
    {
      "command-line-flag": "--mrtm1",
      "description": "Perform MRTM1 kinetic modeling with specified reference tissue activity and time in seconds.",
      "value-key": "[MRTM1_PARAMS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "mrtm1_params",
      "name": "MRTM1 parameters"
    },
    {
      "command-line-flag": "--mrtm2",
      "description": "Perform MRTM2 kinetic modeling with specified parameters.",
      "value-key": "[MRTM2_PARAMS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "mrtm2_params",
      "name": "MRTM2 parameters"
    },
    {
      "command-line-flag": "--logan",
      "description": "Perform Logan kinetic modeling with specified parameters.",
      "value-key": "[LOGAN_PARAMS]",
      "type": "String",
      "list": true,
      "optional": true,
      "id": "logan_params",
      "name": "Logan model parameters"
    },
    {
      "command-line-flag": "--bp-clip-neg",
      "description": "Set negative BP voxels to 0.",
      "value-key": "[BP_CLIP_NEG_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "bp_clip_neg_flag",
      "name": "Clip negative BP"
    },
    {
      "command-line-flag": "--bp-clip-max",
      "description": "Set BP voxels above max to max.",
      "value-key": "[BP_CLIP_MAX]",
      "type": "Number",
      "optional": true,
      "id": "bp_clip_max",
      "name": "Max value for BP clipping"
    },
    {
      "command-line-flag": "--perm-force",
      "description": "Force permutation test, even when design matrix is not orthogonal.",
      "value-key": "[PERM_FORCE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "perm_force_flag",
      "name": "Force permutation test"
    },
    {
      "command-line-flag": "--diag",
      "description": "Set diagnostic level.",
      "value-key": "[DIAG_LEVEL]",
      "type": "Number",
      "optional": true,
      "id": "diag_level",
      "name": "Diagnostic level"
    },
    {
      "command-line-flag": "--diag-cluster",
      "description": "Save significant volume and exit from first simulation loop.",
      "value-key": "[DIAG_CLUSTER_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "diag_cluster_flag",
      "name": "Cluster diagnostic"
    },
    {
      "command-line-flag": "--debug",
      "description": "Turn on debugging mode.",
      "value-key": "[DEBUG_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "debug_flag",
      "name": "Debug mode"
    },
    {
      "command-line-flag": "--checkopts",
      "description": "Check options and exit without executing.",
      "value-key": "[CHECKOPTS_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "checkopts_flag",
      "name": "Check options only"
    },
    {
      "command-line-flag": "--help",
      "description": "Display help information.",
      "value-key": "[HELP_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "help_flag",
      "name": "Help"
    },
    {
      "command-line-flag": "--version",
      "description": "Print out version and exit.",
      "value-key": "[VERSION_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "version_flag",
      "name": "Version"
    },
    {
      "command-line-flag": "--no-fix-vertex-area",
      "description": "Turn off fixing of vertex area (backward compatibility).",
      "value-key": "[NO_FIX_VERTEX_AREA_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_fix_vertex_area_flag",
      "name": "No fix vertex area"
    },
    {
      "command-line-flag": "--allowsubjrep",
      "description": "Allow subject names to repeat in the fsgd file.",
      "value-key": "[ALLOWSUBJREP_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "allowsubjrep_flag",
      "name": "Allow subject repetition"
    },
    {
      "command-line-flag": "--allow-zero-dof",
      "description": "Allow analyses with zero degrees of freedom.",
      "value-key": "[ALLOW_ZERO_DOF_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "allow_zero_dof_flag",
      "name": "Allow zero DOF"
    },
    {
      "command-line-flag": "--illcond",
      "description": "Allow ill-conditioned design matrices.",
      "value-key": "[ILLCOND_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "illcond_flag",
      "name": "Allow ill-condition"
    },
    {
      "command-line-flag": "--sim-done",
      "description": "Create done file when simulation finishes.",
      "value-key": "[SIM_DONE_FILE]",
      "type": "File",
      "optional": true,
      "id": "sim_done_file",
      "name": "Simulation done file"
    },
    {
      "command-line-flag": "--no-sig-double",
      "description": "Compute sig = -log10(p) from float p value, not double.",
      "value-key": "[NO_SIG_DOUBLE_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "no_sig_double_flag",
      "name": "No double precision"
    }
  ],
  "output-files": [
    {
      "path-template": "beta.mgh",
      "description": "All regression coefficients (B).",
      "optional": true,
      "id": "regression_coefs",
      "name": "Regression coefficients"
    },
    {
      "path-template": "eres.mgh",
      "description": "Residual error.",
      "optional": true,
      "id": "residual_error",
      "name": "Residual error file"
    },
    {
      "path-template": "rvar.mgh",
      "description": "Residual error variance.",
      "optional": true,
      "id": "residual_variance",
      "name": "Residual variance file"
    },
    {
      "path-template": "rstd.mgh",
      "description": "Residual error standard deviation.",
      "optional": true,
      "id": "residual_stddev",
      "name": "Residual standard deviation"
    },
    {
      "path-template": "y.fsgd",
      "description": "FSGD file if one was input.",
      "optional": true,
      "id": "fsgd_output",
      "name": "Output FSGD file"
    },
    {
      "path-template": "wn.mgh",
      "description": "Normalized weights with --w or --wls.",
      "optional": true,
      "id": "normalized_weights",
      "name": "Normalized weights file"
    },
    {
      "path-template": "yhat.mgh",
      "description": "Signal estimate with --save-yhat.",
      "optional": true,
      "id": "signal_estimate",
      "name": "Signal estimate file"
    },
    {
      "path-template": "mask.mgh",
      "description": "Final mask when a mask is used.",
      "optional": true,
      "id": "final_mask",
      "name": "Final mask file"
    },
    {
      "path-template": "cond.mgh",
      "description": "Design matrix condition at each voxel with --save-cond.",
      "optional": true,
      "id": "design_condition",
      "name": "Design matrix condition file"
    },
    {
      "path-template": "contrast1name",
      "description": "Directory for each contrast output files.",
      "optional": true,
      "id": "contrast_output_dir",
      "name": "Contrast output directory"
    }
  ],
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "url": "https://github.com/freesurfer/freesurfer"
}
