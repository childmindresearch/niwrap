{
  "name": "mri binarize",
  "command-line": "mri_binarize [ABS] [BIN_COL_NUM] [BIN_VAL] [BIN_VAL_NOT] [BINARY_FILE] [COUNT_FILE] [DILATE] [ERODE] [ERODE2D] [FRAME_NO] [IN_FILE] [INVERT] [MASK_FILE] [MASK_THRESH] [MATCH] [MAX] [MERGE_FILE] [MIN] [OUT_TYPE] [RMAX] [RMIN] [SUBJECTS_DIR] [VENTRICLES] [WM] [WM_VEN_CSF] [ZERO_EDGES] [ZERO_SLICE_EDGE]",
  "author": "Nipype (interface)",
  "description": "mri_binarize, as implemented in Nipype (module: nipype.interfaces.freesurfer.model, interface: mri_binarize).\nUse FreeSurfer mri_binarize to threshold an input volume",
  "inputs": [
    {
      "id": "abs",
      "name": "Abs",
      "type": "Flag",
      "value-key": "[ABS]",
      "command-line-flag": "--abs",
      "description": "A boolean. Take abs of invol first (ie, make unsigned).",
      "optional": true
    },
    {
      "id": "bin_col_num",
      "name": "Bin col num",
      "type": "Flag",
      "value-key": "[BIN_COL_NUM]",
      "command-line-flag": "--bincol",
      "description": "A boolean. Set binarized voxel value to its column number.",
      "optional": true
    },
    {
      "id": "bin_val",
      "name": "Bin val",
      "type": "Number",
      "integer": true,
      "value-key": "[BIN_VAL]",
      "command-line-flag": "--binval",
      "description": "An integer. Set vox within thresh to val (default is 1).",
      "optional": true
    },
    {
      "id": "bin_val_not",
      "name": "Bin val not",
      "type": "Number",
      "integer": true,
      "value-key": "[BIN_VAL_NOT]",
      "command-line-flag": "--binvalnot",
      "description": "An integer. Set vox outside range to val (default is 0).",
      "optional": true
    },
    {
      "id": "binary_file",
      "name": "Binary file",
      "type": "File",
      "value-key": "[BINARY_FILE]",
      "command-line-flag": "--o",
      "description": "A pathlike object or string representing a file. Binary output volume.",
      "optional": false
    },
    {
      "id": "count_file",
      "name": "Count file",
      "type": "Flag",
      "value-key": "[COUNT_FILE]",
      "command-line-flag": "--count",
      "description": "A boolean or a pathlike object or string representing a file. Save number of hits in ascii file (hits, ntotvox, pct).",
      "optional": true
    },
    {
      "id": "count_file_2",
      "name": "Count file",
      "type": "File",
      "value-key": "[COUNT_FILE]",
      "command-line-flag": "--count",
      "description": "A boolean or a pathlike object or string representing a file. Save number of hits in ascii file (hits, ntotvox, pct).",
      "optional": true
    },
    {
      "id": "dilate",
      "name": "Dilate",
      "type": "Number",
      "integer": true,
      "value-key": "[DILATE]",
      "command-line-flag": "--dilate",
      "description": "An integer. Niters: dilate binarization in 3d.",
      "optional": true
    },
    {
      "id": "erode",
      "name": "Erode",
      "type": "Number",
      "integer": true,
      "value-key": "[ERODE]",
      "command-line-flag": "--erode",
      "description": "An integer. Nerode: erode binarization in 3d (after any dilation).",
      "optional": true
    },
    {
      "id": "erode2d",
      "name": "Erode2d",
      "type": "Number",
      "integer": true,
      "value-key": "[ERODE2D]",
      "command-line-flag": "--erode2d",
      "description": "An integer. Nerode2d: erode binarization in 2d (after any 3d erosion).",
      "optional": true
    },
    {
      "id": "frame_no",
      "name": "Frame no",
      "type": "Number",
      "integer": true,
      "value-key": "[FRAME_NO]",
      "command-line-flag": "--frame",
      "description": "An integer. Use 0-based frame of input (default is 0).",
      "optional": true
    },
    {
      "id": "in_file",
      "name": "In file",
      "type": "File",
      "value-key": "[IN_FILE]",
      "command-line-flag": "--i",
      "description": "A pathlike object or string representing an existing file. Input volume.",
      "optional": false
    },
    {
      "id": "invert",
      "name": "Invert",
      "type": "Flag",
      "value-key": "[INVERT]",
      "command-line-flag": "--inv",
      "description": "A boolean. Set binval=0, binvalnot=1.",
      "optional": true
    },
    {
      "id": "mask_file",
      "name": "Mask file",
      "type": "File",
      "value-key": "[MASK_FILE]",
      "command-line-flag": "--mask maskvol",
      "description": "A pathlike object or string representing an existing file. Must be within mask.",
      "optional": true
    },
    {
      "id": "mask_thresh",
      "name": "Mask thresh",
      "type": "Number",
      "value-key": "[MASK_THRESH]",
      "command-line-flag": "--mask-thresh",
      "description": "A float. Set thresh for mask.",
      "optional": true
    },
    {
      "id": "match",
      "name": "Match",
      "type": "Number",
      "list": true,
      "integer": true,
      "value-key": "[MATCH]",
      "command-line-flag": "--match",
      "description": "A list of items which are an integer. Match instead of threshold.",
      "optional": true
    },
    {
      "id": "max",
      "name": "Max",
      "type": "Number",
      "value-key": "[MAX]",
      "command-line-flag": "--max",
      "description": "A float. Max thresh.",
      "optional": true
    },
    {
      "id": "merge_file",
      "name": "Merge file",
      "type": "File",
      "value-key": "[MERGE_FILE]",
      "command-line-flag": "--merge",
      "description": "A pathlike object or string representing an existing file. Merge with mergevol.",
      "optional": true
    },
    {
      "id": "min",
      "name": "Min",
      "type": "Number",
      "value-key": "[MIN]",
      "command-line-flag": "--min",
      "description": "A float. Min thresh.",
      "optional": true
    },
    {
      "id": "out_type",
      "name": "Out type",
      "type": "String",
      "value-key": "[OUT_TYPE]",
      "description": "'nii' or 'nii.gz' or 'mgz'. Output file type.",
      "optional": true,
      "value-choices": ["nii", "nii.gz", "mgz"]
    },
    {
      "id": "rmax",
      "name": "Rmax",
      "type": "Number",
      "value-key": "[RMAX]",
      "command-line-flag": "--rmax",
      "description": "A float. Compute max based on rmax*globalmean.",
      "optional": true
    },
    {
      "id": "rmin",
      "name": "Rmin",
      "type": "Number",
      "value-key": "[RMIN]",
      "command-line-flag": "--rmin",
      "description": "A float. Compute min based on rmin*globalmean.",
      "optional": true
    },
    {
      "id": "subjects_dir",
      "name": "Subjects dir",
      "type": "File",
      "value-key": "[SUBJECTS_DIR]",
      "description": "A pathlike object or string representing an existing directory. Subjects directory.",
      "optional": true
    },
    {
      "id": "ventricles",
      "name": "Ventricles",
      "type": "Flag",
      "value-key": "[VENTRICLES]",
      "command-line-flag": "--ventricles",
      "description": "A boolean. Set match vals those for aseg ventricles+choroid (not 4th).",
      "optional": true
    },
    {
      "id": "wm",
      "name": "Wm",
      "type": "Flag",
      "value-key": "[WM]",
      "command-line-flag": "--wm",
      "description": "A boolean. Set match vals to 2 and 41 (aseg for cerebral wm).",
      "optional": true
    },
    {
      "id": "wm_ven_csf",
      "name": "Wm ven csf",
      "type": "Flag",
      "value-key": "[WM_VEN_CSF]",
      "command-line-flag": "--wm+vcsf",
      "description": "A boolean. Wm and ventricular csf, including choroid (not 4th).",
      "optional": true
    },
    {
      "id": "zero_edges",
      "name": "Zero edges",
      "type": "Flag",
      "value-key": "[ZERO_EDGES]",
      "command-line-flag": "--zero-edges",
      "description": "A boolean. Zero the edge voxels.",
      "optional": true
    },
    {
      "id": "zero_slice_edge",
      "name": "Zero slice edge",
      "type": "Flag",
      "value-key": "[ZERO_SLICE_EDGE]",
      "command-line-flag": "--zero-slice-edges",
      "description": "A boolean. Zero the edge slice voxels.",
      "optional": true
    }
  ],
  "output-files": [
    {
      "name": "Binary file",
      "id": "binary_file_outfile",
      "path-template": "[BINARY_FILE]",
      "optional": true,
      "description": "Binarized output volume."
    },
    {
      "name": "Count file",
      "id": "count_file_outfile",
      "path-template": "[COUNT_FILE].txt",
      "optional": true,
      "description": "Ascii file containing number of hits."
    }
  ],
  "groups": [
    {
      "id": "count_file_group",
      "name": "Count file group",
      "members": ["count_file", "count_file_2"],
      "mutually-exclusive": true
    },
    {
      "id": "mutex_group",
      "name": "Mutex group",
      "members": ["min", "wm_ven_csf"],
      "mutually-exclusive": true
    },
    {
      "id": "mutex_group_2",
      "name": "Mutex group 2",
      "members": ["max", "wm_ven_csf"],
      "mutually-exclusive": true
    },
    {
      "id": "mutex_group_3",
      "name": "Mutex group 3",
      "members": ["max", "min", "wm_ven_csf"],
      "mutually-exclusive": true
    },
    {
      "id": "one_is_required", 
      "name": "One is required",
      "members": ["max", "min", "match"]
    }
  ],
  "tool-version": "1.0.0",
  "schema-version": "0.5",
  "container-image": {
    "image": "container/image",
    "type": "docker"
  },
  "tags": {
    "domain": "neuroinformatics",
    "source": "nipype-interface"
  }
}
