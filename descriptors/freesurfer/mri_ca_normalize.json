{
  "tool-version": "7.4.1",
  "name": "mri_ca_normalize",
  "author": "FreeSurfer Developers",
  "descriptor-url": "UNKNOWN",
  "description": "This program creates a normalized volume using the brain volume and an input gca file.",
  "command-line": "mri_ca_normalize [INPUT_BRAIN_VOLUMES] [ATLAS_FILE] [XFORM_FILE] [OUTPUT_VOLUMES] [SEG_FILE] [SIGMA_VALUE] [FSAMPLES_FILE] [DILATE_ITERS] [NSAMPLES_FILE] [MASK_VOL] [CONTROL_POINTS_FILE] [FONLY_FILE] [DIAG_FILE] [DEBUG_VOXEL_COORDS] [DEBUG_NODE_COORDS] [TR_VALUE] [TE_VALUE] [ALPHA_VALUE] [EXAMPLE_MRI_VOL] [EXAMPLE_SEG] [NOVAR_FLAG] [RENORM_FILE] [EXTRA_NORM_PCTL] [FLASH_FLAG] [PRIOR_THRESHOLD] [WRITE_FLAG] [N_REGIONS] [VERBOSE_VALUE] [TOP_PERCENT]",
  "container-image": {
    "type": "docker",
    "image": "freesurfer/freesurfer:7.4.1"
  },
  "schema-version": "0.5",
  "inputs": [
    {
      "description": "Input brain volume(s). Can specify multiple inputs.",
      "value-key": "[INPUT_BRAIN_VOLUMES]",
      "type": "File",
      "list": true,
      "optional": false,
      "id": "input_brain_volumes",
      "name": "Input Brain Volumes"
    },
    {
      "description": "Atlas file in GCA format.",
      "value-key": "[ATLAS_FILE]",
      "type": "File",
      "optional": false,
      "id": "atlas_file",
      "name": "Atlas File"
    },
    {
      "description": "Transform file in LTA format.",
      "value-key": "[XFORM_FILE]",
      "type": "File",
      "optional": false,
      "id": "xform_file",
      "name": "Transform File"
    },
    {
      "description": "Output volume(s) in either mgh or mgz format. Can specify multiple outputs.",
      "value-key": "[OUTPUT_VOLUMES]",
      "type": "String",
      "list": true,
      "optional": false,
      "id": "output_volumes",
      "name": "Output Volumes"
    },
    {
      "command-line-flag": "-seg",
      "description": "Aseg file to help normalization.",
      "value-key": "[SEG_FILE]",
      "type": "File",
      "optional": true,
      "id": "seg_file",
      "name": "Segmentation File"
    },
    {
      "command-line-flag": "-sigma",
      "description": "Smoothing sigma for bias field if control points specified (default=4).",
      "value-key": "[SIGMA_VALUE]",
      "type": "Number",
      "optional": true,
      "id": "sigma_value",
      "name": "Smoothing Sigma"
    },
    {
      "command-line-flag": "-fsamples",
      "description": "Write control points to filename.",
      "value-key": "[FSAMPLES_FILE]",
      "type": "File",
      "optional": true,
      "id": "fsamples_file",
      "name": "Fsamples File"
    },
    {
      "command-line-flag": "-dilate",
      "description": "Dilate the brain mask niters times before masking.",
      "value-key": "[DILATE_ITERS]",
      "type": "Number",
      "optional": true,
      "id": "dilate_iters",
      "name": "Dilate Iterations"
    },
    {
      "command-line-flag": "-nsamples",
      "description": "Write transformed normalization control points to filename.",
      "value-key": "[NSAMPLES_FILE]",
      "type": "File",
      "optional": true,
      "id": "nsamples_file",
      "name": "Nsamples File"
    },
    {
      "command-line-flag": "-mask",
      "description": "Use mri_vol to mask input.",
      "value-key": "[MASK_VOL]",
      "type": "File",
      "optional": true,
      "id": "mask_vol",
      "name": "Mask Volume"
    },
    {
      "command-line-flag": "-f",
      "description": "Define control points from filename.",
      "value-key": "[CONTROL_POINTS_FILE]",
      "type": "File",
      "optional": true,
      "id": "control_points_file",
      "name": "Control Points File"
    },
    {
      "command-line-flag": "-fonly",
      "description": "Only use control points from filename.",
      "value-key": "[FONLY_FILE]",
      "type": "File",
      "optional": true,
      "id": "fonly_file",
      "name": "Fonly File"
    },
    {
      "command-line-flag": "-diag",
      "description": "Write to log file.",
      "value-key": "[DIAG_FILE]",
      "type": "File",
      "optional": true,
      "id": "diag_file",
      "name": "Diagnostic File"
    },
    {
      "command-line-flag": "-debug_voxel",
      "description": "Debug voxel. Needs x, y, z coordinates.",
      "value-key": "[DEBUG_VOXEL_COORDS]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "min-list-entries": 3,
      "optional": true,
      "id": "debug_voxel_coords",
      "name": "Debug Voxel Coordinates"
    },
    {
      "command-line-flag": "-debug_node",
      "description": "Debug node. Needs x, y, z coordinates.",
      "value-key": "[DEBUG_NODE_COORDS]",
      "type": "Number",
      "list": true,
      "max-list-entries": 3,
      "min-list-entries": 3,
      "optional": true,
      "id": "debug_node_coords",
      "name": "Debug Node Coordinates"
    },
    {
      "command-line-flag": "-tr",
      "description": "Set TR in msec.",
      "value-key": "[TR_VALUE]",
      "type": "Number",
      "optional": true,
      "id": "tr_value",
      "name": "TR Value"
    },
    {
      "command-line-flag": "-te",
      "description": "Set TE in msec.",
      "value-key": "[TE_VALUE]",
      "type": "Number",
      "optional": true,
      "id": "te_value",
      "name": "TE Value"
    },
    {
      "command-line-flag": "-alpha",
      "description": "Set alpha in radians.",
      "value-key": "[ALPHA_VALUE]",
      "type": "Number",
      "optional": true,
      "id": "alpha_value",
      "name": "Alpha Value"
    },
    {
      "command-line-flag": "-example",
      "description": "Use T1 (mri_vol) and segmentation as example.",
      "value-key": "[EXAMPLE_MRI_VOL]",
      "type": "File",
      "optional": true,
      "id": "example_mri_vol",
      "name": "Example MRI Volume"
    },
    {
      "command-line-flag": "-extra_norm",
      "description": "Use 1+pct and 1-pct to widen the range of T1 values.",
      "value-key": "[EXTRA_NORM_PCTL]",
      "type": "Number",
      "optional": true,
      "id": "extra_norm_pctl",
      "name": "Extra Norm PCT"
    },
    {
      "command-line-flag": "-prior",
      "description": "Use prior threshold t (default=.6).",
      "value-key": "[PRIOR_THRESHOLD]",
      "type": "Number",
      "optional": true,
      "id": "prior_threshold",
      "name": "Prior Threshold"
    },
    {
      "command-line-flag": "-n",
      "description": "Use n regions/struct for normalization.",
      "value-key": "[N_REGIONS]",
      "type": "Number",
      "optional": true,
      "id": "n_regions",
      "name": "Number of Regions"
    },
    {
      "command-line-flag": "-v",
      "description": "Used for debugging and diagnostics.",
      "value-key": "[VERBOSE_VALUE]",
      "type": "Number",
      "optional": true,
      "id": "verbose_value",
      "name": "Verbose Value"
    },
    {
      "command-line-flag": "-p",
      "description": "Use top p percent (default=.25) white matter points as control points.",
      "value-key": "[TOP_PERCENT]",
      "type": "Number",
      "optional": true,
      "id": "top_percent",
      "name": "Top Percent"
    },
    {
      "command-line-flag": "-novar",
      "description": "Do not use variance estimates.",
      "value-key": "[NOVAR_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "novar_flag",
      "name": "No Variance Flag"
    },
    {
      "command-line-flag": "-renorm",
      "description": "Renormalize using predicted intensity values in mri_vol.",
      "value-key": "[RENORM_FILE]",
      "type": "File",
      "optional": true,
      "id": "renorm_file",
      "name": "Renormalize File"
    },
    {
      "command-line-flag": "-flash",
      "description": "Use FLASH forward model to predict intensity values.",
      "value-key": "[FLASH_FLAG]",
      "type": "Flag",
      "optional": true,
      "id": "flash_flag",
      "name": "Flash Flag"
    }
  ],
  "output-files": [
    {
      "path-template": "output.mgh",
      "description": "Normalized output volume in mgh format.",
      "optional": true,
      "id": "normalized_output",
      "name": "Normalized Output Volume"
    }
  ],
  "url": "https://github.com/freesurfer/freesurfer"
}
